IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXALLITEMIDS') DROP VIEW DAXALLITEMIDS
GO
CREATE VIEW [dbo].[DAXALLITEMIDS] AS 
SELECT DISTINCT DATAAREAID,
                ITEMID,
                INVENTLOCATIONID
FROM DAXINVENTSUMINVENTDIMVIEW
WHERE DATAAREAID = 'lx'
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXCONSULTA') DROP VIEW DAXCONSULTA
GO
CREATE VIEW [dbo].[DAXCONSULTA] AS
SELECT DISTINCT INVENTLOCATIONID,
                DATAAREAID,
                INVENTSITEID,
                WMSLOCATIONIDDEFAULTRECEIPT
FROM dbo.INVENTLOCATION
WHERE (INVENTLOCATIONTYPE = 0)
  AND (SHIPCPYCONTAINERCLOSED = 0)
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXCONTAINERCUSTOMMARKID') DROP VIEW DAXCONTAINERCUSTOMMARKID
GO
CREATE VIEW [dbo].[DAXCONTAINERCUSTOMMARKID] AS
SELECT 
	T2.SHIPCPYCONTAINERID, 
	T1.SHIPCPYCUSTOMMARKID1 
FROM SHIPCPYCONTAINERTRANS T1
INNER JOIN SHIPCPYCONTAINERTABLE T2 
	ON T1.SHIPCPYCONTAINERTABLERECID = T2.RECID
WHERE T1.SHIPCPYCUSTOMMARKID1 != ''
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXCONTAINERS') DROP VIEW DAXCONTAINERS
GO
CREATE VIEW [dbo].[DAXCONTAINERS] AS
SELECT A.PARKINGSPACEID,
       B.DATAAREAID,
       B.PARKINGSECTORID,
       C.PARKINGPOSITIONID,
       C.NAME,
       D.SHIPCPYCONTAINERID,
       D.SHIPCPYCUSTOMMARKID,
       D.SHIPCPYCONTAINERSTATE,
       D.SHIPCPYEXPECTEDDATE,
       E.INTRASTATTRANSPORT
FROM dbo.PARKINGSPACETABLE AS A
INNER JOIN dbo.PARKINGSECTORTABLE AS B ON A.DATAAREAID = B.DATAAREAID
INNER JOIN dbo.PARKINGPOSITIONTABLE AS C ON B.RECID = C.PARKINGSECTORTABLERECID
INNER JOIN dbo.SHIPCPYCONTAINERTABLE AS D ON D.DATAAREAID = A.DATAAREAID
INNER JOIN dbo.SHIPPINGCPYVENDTABLE AS E ON E.RECID = D.SHIPPINGCPYVENDTABLERECID
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXCONTENEDORES') DROP VIEW DAXCONTENEDORES
GO
CREATE VIEW [dbo].[DAXCONTENEDORES] AS
SELECT A.SHIPCPYCONTAINERID,
       A.SHIPCPYCONTAINERSTATE,
       A.SHIPCPYCUSTOMMARKID,
       A.SHIPCPYEXPECTEDDATE,
       A.SHIPCPYREALDATETIME,
       A.DATAAREAID,
       B.NAME,
       B.PARKINGPOSITIONID,
       B.PARKINGSPACETRANSTYPE,
       C.PARKINGSECTORID,
       D.PARKINGSPACEID,
       D.NAME AS SITIO,
       E.INTRASTATTRANSPORT,
	   (SELECT TOP 1 T1.SHIPCPYCUSTOMMARKID1
    FROM SHIPCPYCONTAINERTRANS T1
    WHERE T1.SHIPCPYCONTAINERTABLERECID = A.RECID
    ORDER BY T1.CREATEDDATETIME DESC, T1.RECID DESC) CUSTOMMARKID,
	   F.SHIPCPYCONTAINERLOCALPORTID,
	   F.NAME AS SHIPCPYCONTAINERLOCALPORTNAME
FROM dbo.SHIPCPYCONTAINERTABLE AS A
INNER JOIN dbo.PARKINGPOSITIONTABLE AS B ON A.RECID = B.SHIPCPYCONTAINERTABLERECID
INNER JOIN dbo.PARKINGSECTORTABLE AS C ON B.PARKINGSECTORTABLERECID = C.RECID
INNER JOIN dbo.PARKINGSPACETABLE AS D ON D.RECID = C.PARKINGSPACETABLERECID
INNER JOIN dbo.SHIPPINGCPYVENDTABLE AS E ON E.RECID = A.SHIPPINGCPYVENDTABLERECID
LEFT OUTER JOIN dbo.SHIPCPYCONTAINERLOCALPORT AS F ON A.SHIPCPYCONTAINERLOCALPORTRECID = F.RECID
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXDATAAREAID') DROP VIEW DAXDATAAREAID
GO
CREATE VIEW [dbo].[DAXDATAAREAID] AS 
SELECT DISTINCT DATAAREAID 
FROM DAXINVENTSUMINVENTDIMVIEW 
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXEMPTYWAREHOUSE') DROP VIEW DAXEMPTYWAREHOUSE
GO
CREATE VIEW [dbo].[DAXEMPTYWAREHOUSE] AS 
SELECT DISTINCT T1. USERID,
                T1.INVENTLOCATIONID,
                T1.DATAAREAID
FROM DAXWAREHOUSEUSER T1
INNER JOIN DAXINVENTSUMINVENTDIMVIEW T2 ON T1.INVENTLOCATIONID = T2.INVENTLOCATIONID
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXFISICARESERVADAVIEW') DROP VIEW DAXFISICARESERVADAVIEW
GO
CREATE VIEW [dbo].[DAXFISICARESERVADAVIEW] AS 
SELECT SL.SALESID,
       SL.LINENUM,
       SL.ITEMID,
       SL.DATAAREAID,
       SL.SALESQTY,
       SL.SALESPRICE,
       IT.QTY,
       IT.STATUSISSUE
FROM SALESLINE SL
INNER JOIN INVENTTRANSORIGIN ITO ON ITO.PARTITION = SL.PARTITION
AND ITO.DATAAREAID = SL.DATAAREAID
AND ITO.INVENTTRANSID = SL.INVENTTRANSID
INNER JOIN INVENTTRANS IT ON IT.PARTITION = ITO.PARTITION
AND IT.DATAAREAID = ITO.DATAAREAID
AND IT.INVENTTRANSORIGIN = ITO.RECID
WHERE SL.PARTITION = 5637144576
  AND SL.DATAAREAID = 'LX'
  AND STATUSISSUE = 4
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXINVENT_TRANSFERJOURNAL') DROP VIEW DAXINVENT_TRANSFERJOURNAL
GO
CREATE VIEW [dbo].[DAXINVENT_TRANSFERJOURNAL] AS
SELECT T1.ITEMID,
       T1.NAMEALIAS,
       T1.DATAAREAID,
       T1.PARTITION,
       T1.RECID,
       T2.DATAAREAID AS DATAAREAID#2,
       T2.PARTITION AS PARTITION#2,
       T2.AVAILPHYSICAL,
       T2.RESERVPHYSICAL,
       T2.PHYSICALINVENT,
       T2.AVAILORDERED,
       T2.PDSCWAVAILORDERED,
       T2.PDSCWPHYSICALINVENT,
       T2.PDSCWAVAILPHYSICAL,
       T3.DATAAREAID AS DATAAREAID#3,
       T3.PARTITION AS PARTITION#3,
       T3.INVENTSITEID,
       T3.INVENTLOCATIONID,
       T3.WMSLOCATIONID,
       T3.INVENTBATCHID,
       T3.INVENTSERIALID,
       T3.CONFIGID,
       T3.INVENTCOLORID,
       T3.INVENTSIZEID,
       T3.INVENTSTYLEID,
       T3.INVENTSTATUSID,
       T3.LICENSEPLATEID,
       T4.PARTITION AS PARTITION#4,
       T4.NAME
FROM dbo.INVENTTABLE AS T1
INNER JOIN dbo.INVENTSUM AS T2 ON T1.ITEMID = T2.ITEMID
AND T1.DATAAREAID = T2.DATAAREAID
AND T1.PARTITION = T2.PARTITION
INNER JOIN dbo.INVENTDIM AS T3 ON T2.INVENTDIMID = T3.INVENTDIMID
AND T2.DATAAREAID = T3.DATAAREAID
AND T2.PARTITION = T3.PARTITION
INNER JOIN dbo.ECORESPRODUCTTRANSLATION AS T4 ON T1.PRODUCT = T4.PRODUCT
AND T1.PARTITION = T4.PARTITION
INNER JOIN dbo.INVENTITEMINVENTSETUP AS T5 ON T1.ITEMID = T5.ITEMID
AND T1.DATAAREAID = T5.DATAAREAID
AND T1.PARTITION = T5.PARTITION
WHERE (T4.LANGUAGEID = N'es-mx')
AND (T5.INVENTDIMID = 'AllBlank')
AND (T5.STOPPED = 0)
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXINVENTONHANDCONTAINER') DROP VIEW DAXINVENTONHANDCONTAINER
GO
CREATE VIEW [dbo].[DAXINVENTONHANDCONTAINER] AS
SELECT IT.ITEMID,
       IT.ITEMGROUPID,
       IT.NAME,
       IT.PDSCWUNITID,
       IT.UNITID,
       IT.PDSBESTBEFORE,
       IT.PDSSHELFADVICE,
       IT.PDSSHELFLIFE,
       ISQ.INVENTBATCHID,
       ISQ.INVENTLOCATIONID,
       ISQ.INVENTSITEID,
       ISQ.WMSLOCATIONID,
       IB.PRODDATE,
       DATEDIFF(DAY, IB.PRODDATE, GETDATE()) AS PRODDATEDAYSTOTODAY,
       IB.EXPDATE,
       IB.PDSBESTBEFOREDATE,
       IB.PDSSHELFADVICEDATE,
       IB.PDSDISPOSITIONCODE,
       ISQ.AvailPhysical,
       ISQ.PdsCWAvailPhysical,
       ISQ.POSTEDVALUE,
       CASE
           WHEN ISQ.AvailPhysical > 0 THEN ISQ.POSTEDVALUE / ISQ.AvailPhysical
           WHEN ISQ.AvailPhysical = 0 THEN 0
       END AS COSTPRICE,
       CASE
           WHEN ISQ.PdsCWAvailPhysical > 0 THEN ISQ.POSTEDVALUE / ISQ.PdsCWAvailPhysical
           WHEN ISQ.PdsCWAvailPhysical = 0 THEN 0
       END AS PDSCWCOSTPRICE,
       ISQ.physicalInventCalculated AS INVENTQTYPHYSICALONHAND,
       ISQ.AvailPhysical AS INVENTQTYAVAILPHYSICAL,
       ISQ.RESERVPHYSICAL AS INVENTQTYRESERVPHYSICAL,
       ISQ.PdsCWPhysicalInvent,
       ISNULL(UOM.FACTOR, 0) AS QTYCONVERT01BYUNIT,
       CASE
           WHEN UOM.FACTOR = 0 THEN 0
           WHEN UOM.FACTOR = NULL THEN 0
           ELSE ISQ.AvailPhysical / UOM.FACTOR
       END AS QTYCONVERT01BYUNITPERCENT,
       UOM.FACTOR - ISQ.AvailPhysical AS QTYCONVERT01LEFT,
       SCCT.SHIPCPYCONTAINERID,
	   SCCT.RECID AS SHIPCPYCONTAINERRECID,
       PPT.PARKINGPOSITIONID,
       PST.PARKINGSECTORID,
       PST.NAME AS PARKINGSECTORNAME,
       PSPT.PARKINGSPACEID,
       SCCT.SHIPCPYEXPECTEDEXITDATE,
       SCCT.MAXWEIGHT,
       SCVT.SHIPPINGCPYTYPE,
       IT.DATAAREAID
FROM
  (SELECT INS.ITEMID,
          IND.INVENTSITEID,
          IND.INVENTLOCATIONID,
          IND.INVENTBATCHID,
          IND.WMSLOCATIONID,
          SUM(INS.POSTEDQTY) AS POSTEDQTY,
          SUM(INS.POSTEDVALUE) AS POSTEDVALUE,
          SUM(INS.PHYSICALVALUE) AS PHYSICALVALUE,
          SUM(INS.DEDUCTED) AS DEDUCTED,
          SUM(INS.REGISTERED) AS REGISTERED,
          SUM(INS.RECEIVED) AS RECEIVED,
          SUM(INS.PICKED) AS PICKED,
          SUM(INS.RESERVPHYSICAL) AS RESERVPHYSICAL,
          SUM(INS.RESERVORDERED) AS ReservOrdered,
          SUM(INS.ONORDER) AS OnOrder,
          SUM(INS.ORDERED) AS Ordered,
          SUM(INS.ARRIVED) AS Arrived,
          SUM(INS.QUOTATIONRECEIPT) AS QuotationReceipt,
          SUM(INS.QUOTATIONISSUE) AS QuotationIssue,
          SUM(INS.PHYSICALINVENT) AS PhysicalInvent,
          SUM(INS.AVAILPHYSICAL) AS AvailPhysical,
          SUM(INS.AVAILORDERED) AS AvailOrdered,
          SUM(INS.PDSCWPOSTEDQTY) AS PdsCWPostedQty,
          SUM(INS.PDSCWDEDUCTED) AS PdsCWDeducted,
          SUM(INS.PDSCWREGISTERED) AS PdsCWRegistered,
          SUM(INS.PDSCWRECEIVED) AS PdsCWReceived,
          SUM(INS.PDSCWPICKED) AS PdsCWPicked,
          SUM(INS.PDSCWRESERVPHYSICAL) AS PdsCWReservPhysical,
          SUM(INS.PDSCWRESERVORDERED) AS PdsCWReservOrdered,
          SUM(INS.PDSCWONORDER) AS PdsCWOnOrder,
          SUM(INS.PDSCWORDERED) AS PdsCWOrdered,
          SUM(INS.PDSCWARRIVED) AS PdsCWArrived,
          SUM(INS.PDSCWQUOTATIONRECEIPT) AS PdsCWQuotationReceipt,
          SUM(INS.PDSCWQUOTATIONISSUE) AS PdsCWQuotationIssue,
          SUM(INS.PDSCWPHYSICALINVENT) AS PdsCWPhysicalInvent,
          SUM(INS.PDSCWAVAILPHYSICAL) AS PdsCWAvailPhysical,
          SUM(INS.PDSCWAVAILORDERED) AS PdsCWAvailOrdered,
          SUM(INS.POSTEDQTY) + SUM(INS.RECEIVED) - SUM(INS.DEDUCTED) + SUM(INS.REGISTERED) - SUM(INS.PICKED) AS physicalInventCalculated,
          INS.DATAAREAID
   FROM dbo.INVENTSUM AS INS
   INNER JOIN dbo.INVENTDIM AS IND ON INS.INVENTDIMID = IND.INVENTDIMID
   AND INS.DATAAREAID = IND.DATAAREAID
   WHERE (INS.CLOSED = 0)
     AND (IND.INVENTSITEID IN
            (SELECT SITEID
             FROM dbo.INVENTSITE AS ivs
             WHERE (SHIPCPYISCONTAINER = 1)))
   GROUP BY INS.ITEMID,
            IND.INVENTSITEID,
            IND.INVENTLOCATIONID,
            IND.INVENTBATCHID,
            IND.WMSLOCATIONID,
            INS.DATAAREAID
   HAVING (SUM(INS.POSTEDQTY) + SUM(INS.RECEIVED) - SUM(INS.DEDUCTED) + SUM(INS.REGISTERED) - SUM(INS.PICKED) > 0)) AS ISQ
INNER JOIN
  (SELECT T1.ITEMID,
          T1.PRODUCT,
          T1.PDSBESTBEFORE,
          T1.PDSSHELFADVICE,
          T1.PDSSHELFLIFE,
          T1.DATAAREAID,
          T2.ITEMGROUPID,
          T3.NAME,
          T4.PDSCWUNITID,
          T5.UNITID
   FROM dbo.INVENTTABLE AS T1
   INNER JOIN dbo.ECORESPRODUCTTRANSLATION AS T3 ON T1.PRODUCT = T3.PRODUCT
   AND T1.PARTITION = T3.PARTITION
   LEFT OUTER JOIN dbo.INVENTITEMGROUPITEM AS T2 ON T1.ITEMID = T2.ITEMID
   AND T1.DATAAREAID = T2.ITEMDATAAREAID
   LEFT OUTER JOIN dbo.PDSCATCHWEIGHTITEM AS T4 ON T1.ITEMID = T4.ITEMID
   AND T1.DATAAREAID = T4.DATAAREAID
   LEFT OUTER JOIN dbo.INVENTTABLEMODULE AS T5 ON T1.ITEMID = T5.ITEMID
   AND T1.DATAAREAID = T5.DATAAREAID
   AND T5.MODULETYPE = 0
   WHERE (T3.LANGUAGEID = N'es-mx')) AS IT ON ISQ.ITEMID = IT.ITEMID
AND ISQ.DATAAREAID = IT.DATAAREAID
LEFT OUTER JOIN dbo.INVENTBATCH AS IB ON ISQ.ITEMID = IB.ITEMID
AND ISQ.INVENTBATCHID = IB.INVENTBATCHID
AND ISQ.DATAAREAID = IB.DATAAREAID
LEFT OUTER JOIN dbo.SHIPCPYCONTAINERTABLE AS SCCT ON ISQ.INVENTLOCATIONID = SCCT.SHIPCPYCONTAINERID
LEFT OUTER JOIN dbo.SHIPPINGCPYVENDTABLE AS SCVT ON SCCT.SHIPPINGCPYVENDTABLERECID = SCVT.RECID
LEFT OUTER JOIN
  (SELECT NAME,
          PARKINGINACTIVE,
          PARKINGPOSITIONID,
          PARKINGPOSITIONINT,
          PARKINGSECTORTABLERECID,
          PARKINGSPACETRANSTYPE,
          PARKINGSPACETRANSTYPE_LAST,
          SHIPCPYCONTAINERTABLERECID,
          MODIFIEDDATETIME,
          MODIFIEDBY,
          MODIFIEDTRANSACTIONID,
          CREATEDDATETIME,
          CREATEDBY,
          CREATEDTRANSACTIONID,
          DATAAREAID,
          RECVERSION,
          PARTITION,
          RECID
   FROM dbo.PARKINGPOSITIONTABLE
   WHERE (RECID IN
            (SELECT MIN(RECID) AS Expr1
             FROM dbo.PARKINGPOSITIONTABLE
             GROUP BY SHIPCPYCONTAINERTABLERECID))) AS PPT ON SCCT.RECID = PPT.SHIPCPYCONTAINERTABLERECID
LEFT OUTER JOIN dbo.PARKINGSECTORTABLE AS PST ON PPT.PARKINGSECTORTABLERECID = PST.RECID
LEFT OUTER JOIN dbo.PARKINGSPACETABLE AS PSPT ON PST.PARKINGSPACETABLERECID = PSPT.RECID
LEFT OUTER JOIN
  (SELECT T1.FROMUNITOFMEASURE,
          T1.TOUNITOFMEASURE,
          T1.PRODUCT,
          T1.FACTOR,
          T1.NUMERATOR,
          T1.DENOMINATOR,
          T1.INNEROFFSET,
          T1.OUTEROFFSET,
          T1.ROUNDING,
          T1.MODIFIEDDATETIME,
          T1.RECVERSION,
          T1.PARTITION,
          T1.RECID
   FROM dbo.UNITOFMEASURECONVERSION AS T1
   INNER JOIN dbo.UNITOFMEASURE AS T2 ON T1.FROMUNITOFMEASURE = T2.RECID
   AND T2.SYMBOL = 'PALL'
   INNER JOIN dbo.UNITOFMEASURE AS T3 ON T1.TOUNITOFMEASURE = T3.RECID
   AND T3.SYMBOL = 'LBS') AS UOM ON IT.PRODUCT = UOM.PRODUCT
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXINVENTSUMINVENTDIMVIEW') DROP VIEW DAXINVENTSUMINVENTDIMVIEW
GO
CREATE VIEW "DBO".DAXINVENTSUMINVENTDIMVIEW AS SELECT T1.ITEMID AS ITEMID,T1.NAMEALIAS AS NAMEALIAS,T1.DATAAREAID AS DATAAREAID,T1.PARTITION AS PARTITION,T1.RECID AS RECID,T2.DATAAREAID AS DATAAREAID#2,T2.PARTITION AS PARTITION#2,T2.AVAILPHYSICAL AS AVAILPHYSICAL,T2.RESERVPHYSICAL AS RESERVPHYSICAL,T2.PHYSICALINVENT AS PHYSICALINVENT,T2.AVAILORDERED AS AVAILORDERED,T2.PDSCWAVAILORDERED AS PDSCWAVAILORDERED,T2.PDSCWPHYSICALINVENT AS PDSCWPHYSICALINVENT,T2.PDSCWAVAILPHYSICAL AS PDSCWAVAILPHYSICAL,T3.DATAAREAID AS DATAAREAID#3,T3.PARTITION AS PARTITION#3,T3.INVENTSITEID AS INVENTSITEID,T3.INVENTLOCATIONID AS INVENTLOCATIONID,T3.WMSLOCATIONID AS WMSLOCATIONID,T3.INVENTBATCHID AS INVENTBATCHID,T3.INVENTSERIALID AS INVENTSERIALID,T3.CONFIGID AS CONFIGID,T3.INVENTCOLORID AS INVENTCOLORID,T3.INVENTSIZEID AS INVENTSIZEID,T3.INVENTSTYLEID AS INVENTSTYLEID,T3.INVENTSTATUSID AS INVENTSTATUSID,T3.LICENSEPLATEID AS LICENSEPLATEID,T4.PARTITION AS PARTITION#4,T4.NAME AS NAME FROM INVENTTABLE T1 CROSS JOIN INVENTSUM T2 CROSS JOIN INVENTDIM T3 CROSS JOIN ECORESPRODUCTTRANSLATION T4 WHERE (T1.ITEMID=T2.ITEMID AND (T1.DATAAREAID = T2.DATAAREAID) AND (T1.PARTITION = T2.PARTITION)) AND (T2.INVENTDIMID=T3.INVENTDIMID AND (T2.DATAAREAID = T3.DATAAREAID) AND (T2.PARTITION = T3.PARTITION)) AND ((T4.LANGUAGEID=N'es-mx') AND (T1.PRODUCT=T4.PRODUCT AND (T1.PARTITION = T4.PARTITION)))
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXINVENTSUMINVENTDIMVIEW2') DROP VIEW DAXINVENTSUMINVENTDIMVIEW2
GO
CREATE VIEW [dbo].[DAXINVENTSUMINVENTDIMVIEW2] AS 
SELECT T1.ITEMID AS ITEMID,
       T1.NAMEALIAS AS NAMEALIAS,
       T1.DATAAREAID AS DATAAREAID,
       T1.PARTITION AS PARTITION,
       T1.RECID AS RECID,
       T2.DATAAREAID AS DATAAREAID#2,
       T2.PARTITION AS PARTITION#2,
       T2.AVAILPHYSICAL AS AVAILPHYSICAL,
       T2.RESERVPHYSICAL AS RESERVPHYSICAL,
       T2.PHYSICALINVENT AS PHYSICALINVENT,
       T2.AVAILORDERED AS AVAILORDERED,
       T2.PDSCWAVAILPHYSICAL AS PDSCWAVAILPHYSICAL,
       T2.PDSCWAVAILORDERED AS PDSCWAVAILORDERED,
       T2.PDSCWPHYSICALINVENT AS PDSCWPHYSICALINVENT,
       T3.DATAAREAID AS DATAAREAID#3,
       T3.PARTITION AS PARTITION#3,
       T3.INVENTSITEID AS INVENTSITEID,
       T3.INVENTLOCATIONID AS INVENTLOCATIONID,
       T3.WMSLOCATIONID AS WMSLOCATIONID,
       T3.INVENTBATCHID AS INVENTBATCHID,
       T3.INVENTSERIALID AS INVENTSERIALID,
       T3.CONFIGID AS CONFIGID,
       T3.INVENTCOLORID AS INVENTCOLORID,
       T3.INVENTSIZEID AS INVENTSIZEID,
       T3.INVENTSTYLEID AS INVENTSTYLEID,
       T3.INVENTSTATUSID AS INVENTSTATUSID,
       T3.LICENSEPLATEID AS LICENSEPLATEID,
       T5.STOPPED AS STOPPED,
       T4.PARTITION AS PARTITION#4,
       T4.NAME AS NAME
FROM INVENTTABLE T1
CROSS JOIN INVENTSUM T2
CROSS JOIN InventItemInventSetup T5
CROSS JOIN INVENTDIM T3
CROSS JOIN ECORESPRODUCTTRANSLATION T4
WHERE (T1.ITEMID=T2.ITEMID
       AND (T1.DATAAREAID = T2.DATAAREAID)
       AND (T1.PARTITION = T2.PARTITION))
  AND (T1.ITEMID = T5.ITEMID)
  AND (T2.INVENTDIMID=T3.INVENTDIMID
       AND (T2.DATAAREAID = T3.DATAAREAID)
       AND (T2.PARTITION = T3.PARTITION))
  AND ((T4.LANGUAGEID=N'es-mx')
       AND (T1.PRODUCT=T4.PRODUCT
            AND (T1.PARTITION = T4.PARTITION)))
  AND PDSCWPHYSICALINVENT = 0
  AND AVAILPHYSICAL >= 1
  OR (T1.ITEMID=T2.ITEMID
      AND (T1.DATAAREAID = T2.DATAAREAID)
      AND (T1.PARTITION = T2.PARTITION))
  AND (T1.ITEMID = T5.ITEMID)
  AND (T2.INVENTDIMID=T3.INVENTDIMID
       AND (T2.DATAAREAID = T3.DATAAREAID)
       AND (T2.PARTITION = T3.PARTITION))
  AND ((T4.LANGUAGEID=N'es-mx')
       AND (T1.PRODUCT=T4.PRODUCT
            AND (T1.PARTITION = T4.PARTITION)))
  AND PDSCWPHYSICALINVENT > 0
  AND AVAILPHYSICAL >= 1
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXINVENTTABLESHIPCONTAINERBLOCK') DROP VIEW DAXINVENTTABLESHIPCONTAINERBLOCK
GO
CREATE VIEW [dbo].[DAXINVENTTABLESHIPCONTAINERBLOCK] AS
SELECT DISTINCT 
	T1.ITEMID, 
	T1.NAMEALIAS, 
	T6.NAME, 
	T2.ITEMGROUPID
FROM INVENTTABLE T1
INNER JOIN INVENTITEMGROUPITEM T2 ON T1.ITEMID = T2.ITEMID AND T1.DATAAREAID = T2.ITEMDATAAREAID 
INNER JOIN INVENTITEMGROUP T3 ON T2.ITEMGROUPID = T3.ITEMGROUPID AND T2.ITEMGROUPDATAAREAID = T3.DATAAREAID
INNER JOIN INVENTITEMPURCHSETUP T4 ON T1.ITEMID = T4.ITEMID AND T1.DATAAREAID = T4.DATAAREAID 
INNER JOIN ECORESPRODUCT T5 ON T1.PRODUCT = T5.RECID 
INNER JOIN ECORESPRODUCTTRANSLATION T6 ON T5.RECID = T6.PRODUCT
WHERE 
T6.LANGUAGEID = 'es-mx'
AND T3.SHIPCPYCONTAINERUSE = 1
AND T4.STOPPED = 0
AND T4.INVENTDIMID = 'AllBlank'
AND T4.INVENTDIMIDDEFAULT = 'AllBlank'
AND T1.DATAAREAID = 'lx'
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXINVENTTRANSFERTABLE') DROP VIEW DAXINVENTTRANSFERTABLE
GO
CREATE VIEW [dbo].[DAXINVENTTRANSFERTABLE] AS 
SELECT DISTINCT INVENTLOCATIONIDFROM,
                INVENTLOCATIONIDTO,
                TRANSFERSTATUS,
                FROMADDRESSNAME,
                TOADDRESSNAME,
                DATAAREAID
FROM INVENTTRANSFERTABLE
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXINVENTTRANSFERTABLELINE') DROP VIEW DAXINVENTTRANSFERTABLELINE
GO
CREATE VIEW [dbo].[DAXINVENTTRANSFERTABLELINE] AS
SELECT DISTINCT E.TRANSFERID,
                E.INVENTLOCATIONIDFROM,
                E.INVENTLOCATIONIDTO,
                E.FROMADDRESSNAME,
                E.TOADDRESSNAME,
                E.TRANSFERSTATUS,
                E.DATAAREAID,
                E.SHIPDATE,
                E.DateAsInt,
                D.ITEMID,
                E.RECVERSION,
                D.QTYTRANSFER,
                D.PDSCWQTYTRANSFER,
                F.INVENTSITEID AS SITE_FROM,
                T.INVENTSITEID AS SITE_TO,
                D.LINENUM,
                O.INVENTBATCHID,
                ID_TO.WMSLOCATIONID AS WMSLOCATIONID_TO,
                ID_FROM.WMSLOCATIONID AS WMSLOCATIONID_FROM,

  (SELECT top 1 DIOT.CREATEDUSERID
   FROM dbo.DAXINVENTORDERTRANSFER DIOT
   WHERE DIOT.TRANSFERID = E.TRANSFERID
     AND DIOT.ITEMID = D.ITEMID
     AND DIOT.LINENUMBER = D.LINENUM) AS CREATEDUSERID
FROM dbo.INVENTTRANSFERTABLE AS E
INNER JOIN dbo.INVENTTRANSFERLINE AS D ON E.TRANSFERID = D.TRANSFERID
AND E.DATAAREAID = D.DATAAREAID
INNER JOIN dbo.INVENTLOCATION AS F ON E.INVENTLOCATIONIDFROM = F.INVENTLOCATIONID
INNER JOIN dbo.INVENTLOCATION AS T ON E.INVENTLOCATIONIDTO = T.INVENTLOCATIONID
INNER JOIN dbo.INVENTDIM AS O ON D.INVENTDIMID = O.INVENTDIMID
INNER JOIN dbo.INVENTTRANSORIGIN AS ITO_TO ON D.INVENTTRANSIDRECEIVE = ITO_TO.INVENTTRANSID
INNER JOIN dbo.INVENTTRANS AS IT_TO ON ITO_TO.RECID = IT_TO.INVENTTRANSORIGIN
INNER JOIN dbo.INVENTDIM AS ID_TO ON IT_TO.INVENTDIMID = ID_TO.INVENTDIMID
INNER JOIN dbo.INVENTTRANSORIGIN AS ITO_FROM ON D.INVENTTRANSID = ITO_FROM.INVENTTRANSID
INNER JOIN dbo.INVENTTRANS AS IT_FROM ON ITO_FROM.RECID = IT_FROM.INVENTTRANSORIGIN
INNER JOIN dbo.INVENTDIM AS ID_FROM ON IT_FROM.INVENTDIMID = ID_FROM.INVENTDIMID
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXINVSUMSITELOCATIONVIEW') DROP VIEW DAXINVSUMSITELOCATIONVIEW
GO
CREATE VIEW "DBO".DAXINVSUMSITELOCATIONVIEW AS SELECT T1.ITEMID AS ITEMID,T1.NAMEALIAS AS NAMEALIAS,T1.DATAAREAID AS DATAAREAID1,T1.DATAAREAID AS DATAAREAID,T1.PARTITION AS PARTITION,1010 AS RECID,SUM(T2.AVAILPHYSICAL) AS AVAILPHYSICAL,SUM(T2.AVAILORDERED) AS AVAILORDERED,SUM(T2.PHYSICALINVENT) AS PHYSICALINVENT,SUM(T2.RESERVPHYSICAL) AS RESERVPHYSICAL,SUM(T2.PDSCWAVAILORDERED) AS PDSCWAVAILORDERED,T2.DATAAREAID AS DATAAREAID#2,T2.PARTITION AS PARTITION#2,T2.PDSCWPHYSICALINVENT AS PDSCWPHYSICALINVENT,T3.DATAAREAID AS DATAAREAID#3,T3.PARTITION AS PARTITION#3,T3.INVENTSITEID AS INVENTSITEID,T3.INVENTLOCATIONID AS INVENTLOCATIONID,T3.WMSLOCATIONID AS WMSLOCATIONID,T4.PARTITION AS PARTITION#4,T4.NAME AS NAME FROM INVENTTABLE T1 CROSS JOIN INVENTSUM T2 CROSS JOIN INVENTDIM T3 CROSS JOIN ECORESPRODUCTTRANSLATION T4 WHERE (T1.ITEMID=T2.ITEMID AND (T1.DATAAREAID = T2.DATAAREAID) AND (T1.PARTITION = T2.PARTITION)) AND (T2.INVENTDIMID=T3.INVENTDIMID AND (T2.DATAAREAID = T3.DATAAREAID) AND (T2.PARTITION = T3.PARTITION)) AND ((T4.LANGUAGEID=N'es-mx') AND (T1.PRODUCT=T4.PRODUCT AND (T1.PARTITION = T4.PARTITION))) GROUP BY T1.ITEMID,T1.NAMEALIAS,T1.DATAAREAID,T1.DATAAREAID,T1.PARTITION,T2.DATAAREAID,T2.PARTITION,T2.PDSCWPHYSICALINVENT,T3.DATAAREAID,T3.PARTITION,T3.INVENTSITEID,T3.INVENTLOCATIONID,T3.WMSLOCATIONID,T4.PARTITION,T4.NAME
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXITEMIDAD') DROP VIEW DAXITEMIDAD
GO
CREATE VIEW [dbo].[DAXITEMIDAD] AS 
SELECT DISTINCT ITEMID
FROM DAXINVENTSUMINVENTDIMVIEW
WHERE AVAILPHYSICAL > 0
  AND DATAAREAID = 'ad'
  OR PDSCWAVAILORDERED >0
  AND DATAAREAID = 'ad'
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXITEMIDEX') DROP VIEW DAXITEMIDEX
GO
CREATE VIEW [dbo].[DAXITEMIDEX] AS 
SELECT DISTINCT ITEMID
FROM DAXINVENTSUMINVENTDIMVIEW
WHERE AVAILPHYSICAL > 0
  AND DATAAREAID = 'ex'
  OR PDSCWAVAILORDERED >0
  AND DATAAREAID = 'ex'
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXITEMIDEXL') DROP VIEW DAXITEMIDEXL
GO
CREATE VIEW [dbo].[DAXITEMIDEXL] AS 
SELECT DISTINCT ITEMID
FROM DAXINVENTSUMINVENTDIMVIEW
WHERE AVAILPHYSICAL > 0
  AND DATAAREAID = 'exl'
  OR PDSCWAVAILORDERED >0
  AND DATAAREAID = 'exl'
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXITEMIDLX') DROP VIEW DAXITEMIDLX
GO
CREATE VIEW [dbo].[DAXITEMIDLX] AS 
SELECT DISTINCT ITEMID
FROM DAXINVENTSUMINVENTDIMVIEW
WHERE DATAAREAID = 'lx'
  AND AVAILPHYSICAL > 0
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXITEMIDS') DROP VIEW DAXITEMIDS
GO
CREATE VIEW [dbo].[DAXITEMIDS] AS 
SELECT DISTINCT ITEMID,
                DATAAREAID
FROM DAXINVENTSUMINVENTDIMVIEW
WHERE AVAILPHYSICAL > 0
  OR PDSCWAVAILORDERED >0
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXITEMNAMES') DROP VIEW DAXITEMNAMES
GO
CREATE VIEW [dbo].[DAXITEMNAMES] AS 
SELECT T1.ITEMID,
       T2.NAME
FROM INVENTTABLE T1
INNER JOIN ECORESPRODUCTTRANSLATION T2 ON T1.PRODUCT = T2.PRODUCT
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXITEMSJOURNAL') DROP VIEW DAXITEMSJOURNAL
GO
CREATE VIEW [dbo].[DAXITEMSJOURNAL] AS 
SELECT DISTINCT ITEMID,
                NAME,
                DATAAREAID,
                INVENTLOCATIONID
FROM DAXINVENTSUMINVENTDIMVIEW
WHERE AVAILPHYSICAL > 0
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXITEMSNOTBLOCK') DROP VIEW DAXITEMSNOTBLOCK
GO
CREATE VIEW [dbo].[DAXITEMSNOTBLOCK] AS
SELECT DISTINCT 
	T3.ITEMID, 
	T2.NAME,
	T1.DATAAREAID, 
	T1.STOPPED
FROM            
	dbo.INVENTITEMINVENTSETUP AS T1 
	INNER JOIN dbo.INVENTTABLE AS T3 ON T1.ITEMID = T3.ITEMID 
	INNER JOIN dbo.ECORESPRODUCTTRANSLATION AS T2 ON T2.PRODUCT = T3.PRODUCT 
	INNER JOIN dbo.INVENTDIM AS T4 ON T1.INVENTDIMID = T4.INVENTDIMID
WHERE        
	(T1.STOPPED = 0) 
	AND (T1.INVENTDIMID = 'AllBlank')
	AND (T2.LANGUAGEID = N'es-mx')
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXJOURNAL_TRANSFERJOURNAL') DROP VIEW DAXJOURNAL_TRANSFERJOURNAL
GO
CREATE VIEW [dbo].[DAXJOURNAL_TRANSFERJOURNAL] AS
SELECT JOURNALNAMEID,
       DESCRIPTION,
       DATAAREAID
FROM INVENTJOURNALNAME
WHERE JOURNALTRANSTYPE = 3
  AND JOURNALTYPE = 2
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXNAMEAD') DROP VIEW DAXNAMEAD
GO
CREATE VIEW [dbo].[DAXNAMEAD] AS 
SELECT DISTINCT NAME
FROM DAXINVENTSUMINVENTDIMVIEW
WHERE AVAILPHYSICAL > 0
  AND DATAAREAID ='ad'
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXNAMEEX') DROP VIEW DAXNAMEEX
GO
CREATE VIEW [dbo].[DAXNAMEEX] AS 
SELECT DISTINCT NAME
FROM DAXINVENTSUMINVENTDIMVIEW
WHERE AVAILPHYSICAL > 0
  AND DATAAREAID ='ex'
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXNAMEEXL') DROP VIEW DAXNAMEEXL
GO
CREATE VIEW [dbo].[DAXNAMEEXL] AS 
SELECT DISTINCT NAME
FROM DAXINVENTSUMINVENTDIMVIEW
WHERE AVAILPHYSICAL > 0
  AND DATAAREAID ='exl'
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXNAMELX') DROP VIEW DAXNAMELX
GO
CREATE VIEW [dbo].[DAXNAMELX] AS 
SELECT DISTINCT NAME
FROM DAXINVENTSUMINVENTDIMVIEW
WHERE AVAILPHYSICAL > 0
  AND DATAAREAID ='lx'
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXPARKINGFILLCONTAINER') DROP VIEW DAXPARKINGFILLCONTAINER
GO
CREATE VIEW [dbo].[DAXPARKINGFILLCONTAINER] AS
SELECT T1.PARKINGSPACEID,
       T1.PARKINGSPACENAME,
       T1.PARKINGSECTORID,
       T1.PARKINGSECTORNAME,
       T1.PARKINGPOSITIONID,
       T1.SHIPCPYCONTAINERID,
       T1.SHIPCPYEXPECTEDEXITDATE,
       T1.PARKINGSPACETRANSTYPE,
       T1.PARKINGSPACETRANSTYPE_DESC,
       T1.MAXWEIGHT,
       ISNULL(T2.INVENTQTYAVAILPHYSICAL, 0) AS INVENTQTYAVAILPHYSICAL,
       CASE
           WHEN T2.MAXWEIGHT != 0 THEN ROUND((T2.INVENTQTYAVAILPHYSICAL / T2.MAXWEIGHT) * 100, 2)
           ELSE 0
       END AS PERCENTFILLCONTAINER
FROM dbo.DAXPARKINGPOSITIONTABLE AS T1
LEFT OUTER JOIN
  (SELECT SHIPCPYCONTAINERID,
          SHIPCPYCONTAINERRECID,
          SHIPPINGCPYTYPE,
          SUM(INVENTQTYPHYSICALONHAND) AS INVENTQTYPHYSICALONHAND,
          SUM(INVENTQTYAVAILPHYSICAL) AS INVENTQTYAVAILPHYSICAL,
          SUM(INVENTQTYRESERVPHYSICAL) AS INVENTQTYRESERVPHYSICAL,
          SUM(PdsCWAvailPhysical) AS PDSCWAVAILPHYSICAL,
          SUM(PdsCWPhysicalInvent) AS PDSCWPHYSICALINVENT,
          SUM(POSTEDVALUE) AS POSTEDVALUE,
          SUM(COSTPRICE) AS COSTPRICE,
          SUM(PDSCWCOSTPRICE) AS PDSCWCOSTPRICE,
          MIN(MAXWEIGHT) AS MAXWEIGHT
   FROM dbo.DAXINVENTONHANDCONTAINER
   GROUP BY SHIPCPYCONTAINERID,
            SHIPCPYCONTAINERRECID,
            SHIPPINGCPYTYPE) AS T2 ON T1.SHIPCPYCONTAINERRECID = T2.SHIPCPYCONTAINERRECID
WHERE (T1.SHIPCPYCONTAINERID IS NOT NULL)
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXPARKINGFILLPALLET') DROP VIEW DAXPARKINGFILLPALLET
GO
CREATE VIEW [dbo].[DAXPARKINGFILLPALLET] AS
SELECT iif(t2.QtyConvert01ByUnitAvg > 0, (t2.INVENTQTYAVAILPHYSICAL/t2.QtyConvert01ByUnitAvg)*100, 0) AS PERCENTFILLPALLET,
       iif(t2.QtyConvert01ByUnitAvg > 0, (t1.INVENTQTYAVAILPHYSICAL/t2.QtyConvert01ByUnitAvg)*100, 0) AS PERCENTFILLITEMPALLET,
       t2.ITEMSINPALLET,
       t1.*
FROM daxinventonhandcontainer t1
INNER JOIN
  (SELECT tmp.shipcpycontainerrecid,
          tmp.wmslocationid,
          SUM(tmp.INVENTQTYAVAILPHYSICAL) AS INVENTQTYAVAILPHYSICAL,
          isnull(AVG(tmp.QtyConvert01ByUnit), 0) AS QtyConvert01ByUnitAvg,
          COUNT(*) AS ITEMSINPALLET
   FROM daxinventonhandcontainer tmp
   GROUP BY tmp.shipcpycontainerrecid,
            tmp.wmslocationid) AS t2 ON t1.shipcpycontainerrecid = t2.shipcpycontainerrecid
AND t1.wmslocationid = t2.wmslocationid
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXPARKINGPOSITIONTABLE') DROP VIEW DAXPARKINGPOSITIONTABLE
GO
CREATE VIEW [dbo].[DAXPARKINGPOSITIONTABLE] AS
SELECT pst.PARKINGSPACEID,
       pst.NAME AS PARKINGSPACENAME,
	   pst.ISEXTERNAL,
       pset.PARKINGSECTORID,
       pset.NAME AS PARKINGSECTORNAME,
       ppt.PARKINGPOSITIONID,
       ppt.NAME AS PARKINGPOSITIONNAME,
       ppt.PARKINGINACTIVE,
       scvt.INTRASTATTRANSPORT,
       scct.SHIPCPYCONTAINERID,
       scct.RECID AS SHIPCPYCONTAINERRECID,
       scct.SHIPCPYEXPECTEDEXITDATE,
       ppt.PARKINGSPACETRANSTYPE,
       CASE
           WHEN ppt.PARKINGSPACETRANSTYPE = 0 THEN 'Libre'
           WHEN ppt.PARKINGSPACETRANSTYPE = 1 THEN 'Creación'
           WHEN ppt.PARKINGSPACETRANSTYPE = 2 THEN 'Reservado'
           WHEN ppt.PARKINGSPACETRANSTYPE = 3 THEN 'Ingresado'
           WHEN ppt.PARKINGSPACETRANSTYPE = 4 THEN 'Abierto'
           WHEN ppt.PARKINGSPACETRANSTYPE = 5 THEN 'Traslado de entrada interno'
           WHEN ppt.PARKINGSPACETRANSTYPE = 6 THEN 'Traslado de salida interno'
           WHEN ppt.PARKINGSPACETRANSTYPE = 7 THEN 'Cerrado'
           WHEN ppt.PARKINGSPACETRANSTYPE = 8 THEN 'Salida final'
           WHEN ppt.PARKINGSPACETRANSTYPE = 9 THEN 'Traslado preparado entrada externa'
           WHEN ppt.PARKINGSPACETRANSTYPE = 10 THEN 'Traslado preparado salida externa'
           WHEN ppt.PARKINGSPACETRANSTYPE = 11 THEN 'Salida externa'
           WHEN ppt.PARKINGSPACETRANSTYPE = 12 THEN 'Traslado de entrada externa'
           WHEN ppt.PARKINGSPACETRANSTYPE = 13 THEN 'Traslado de salida externa'
           WHEN ppt.PARKINGSPACETRANSTYPE = 14 THEN 'Reservado cancelado'
       END AS PARKINGSPACETRANSTYPE_DESC,
       scvt.SHIPPINGCPYTYPE,
       CASE
           WHEN scvt.SHIPPINGCPYTYPE = 0 THEN 'Comercial'
           WHEN scvt.SHIPPINGCPYTYPE = 1 THEN 'Propia'
       END AS SHIPPINGCPYTYPE_DESC,
       scct.MAXWEIGHT
FROM dbo.PARKINGPOSITIONTABLE AS ppt
INNER JOIN dbo.PARKINGSECTORTABLE AS pset ON ppt.PARKINGSECTORTABLERECID = pset.RECID
AND pset.PARKINGINACTIVE = 0
INNER JOIN dbo.PARKINGSPACETABLE AS pst ON pset.PARKINGSPACETABLERECID = pst.RECID
LEFT OUTER JOIN dbo.SHIPCPYCONTAINERTABLE AS scct ON ppt.SHIPCPYCONTAINERTABLERECID = scct.RECID
LEFT OUTER JOIN dbo.SHIPPINGCPYVENDTABLE AS scvt ON scct.SHIPPINGCPYVENDTABLERECID = scvt.RECID
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXPARKINGPOSITIONTABLE2') DROP VIEW DAXPARKINGPOSITIONTABLE2
GO
CREATE VIEW [dbo].[DAXPARKINGPOSITIONTABLE2] AS
SELECT DISTINCT pst.PARKINGSPACEID,
                pst.NAME PARKINGSPACENAME,
                pset.PARKINGSECTORID,
                pset.NAME PARKINGSECTORNAME
FROM PARKINGPOSITIONTABLE ppt
INNER JOIN ParkingSectorTable pset ON ppt.PARKINGSECTORTABLERECID = pset.RECID
AND pset.PARKINGINACTIVE = 0
INNER JOIN PARKINGSPACETABLE pst ON pset.PARKINGSPACETABLERECID = pst.RECID
LEFT OUTER JOIN SHIPCPYCONTAINERTABLE scct ON ppt.SHIPCPYCONTAINERTABLERECID = scct.RECID
LEFT OUTER JOIN SHIPPINGCPYVENDTABLE scvt ON scct.SHIPPINGCPYVENDTABLERECID = scvt.RECID
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXPARKINGSUMMARYBYSECTOR') DROP VIEW DAXPARKINGSUMMARYBYSECTOR
GO
CREATE VIEW [dbo].[DAXPARKINGSUMMARYBYSECTOR] AS
SELECT PARKINGSPACEID,
       PARKINGSPACENAME,
       PARKINGSECTORID,
       PARKINGSECTORNAME,

  (SELECT COUNT(*) AS Expr1
   FROM dbo.DAXPARKINGPOSITIONTABLE AS dppt
   WHERE (T1.PARKINGSPACEID = PARKINGSPACEID)
     AND (T1.PARKINGSECTORID = PARKINGSECTORID)
     AND (PARKINGSPACETRANSTYPE = 0)) AS AVAILPOSITION,

  (SELECT COUNT(*) AS Expr1
   FROM dbo.DAXPARKINGPOSITIONTABLE AS dppt
   WHERE (T1.PARKINGSPACEID = PARKINGSPACEID)
     AND (T1.PARKINGSECTORID = PARKINGSECTORID)
     AND (PARKINGSPACETRANSTYPE <> 0)) AS TAKENPOSITION,

  (SELECT COUNT(*) AS Expr1
   FROM dbo.DAXPARKINGPOSITIONTABLE AS dppt
   WHERE (T1.PARKINGSPACEID = PARKINGSPACEID)
     AND (T1.PARKINGSECTORID = PARKINGSECTORID)
     ) AS TOTALPOSITION,

  (SELECT COUNT(*) AS Expr1
   FROM dbo.DAXPARKINGPOSITIONTABLE AS dppt
   WHERE (T1.PARKINGSPACEID = PARKINGSPACEID)
     AND (T1.PARKINGSECTORID = PARKINGSECTORID)
     AND (SHIPPINGCPYTYPE = 0)) AS COMMERCIALCONTAINERS,

  (SELECT COUNT(*) AS Expr1
   FROM dbo.DAXPARKINGPOSITIONTABLE AS dppt
   WHERE (T1.PARKINGSPACEID = PARKINGSPACEID)
     AND (T1.PARKINGSECTORID = PARKINGSECTORID)
     AND (SHIPPINGCPYTYPE = 1)) AS OWNCONTAINERS

FROM dbo.DAXPARKINGPOSITIONTABLE AS T1
GROUP BY PARKINGSPACEID,
         PARKINGSPACENAME,
         PARKINGSECTORID,
         PARKINGSECTORNAME
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXPARKINGSUMMARYBYSITE') DROP VIEW DAXPARKINGSUMMARYBYSITE
GO
CREATE VIEW [dbo].[DAXPARKINGSUMMARYBYSITE] AS
SELECT PARKINGSPACEID,
       PARKINGSPACENAME,

  (SELECT COUNT(*) AS Expr1
   FROM
     (SELECT PARKINGSECTORID
      FROM dbo.DAXPARKINGPOSITIONTABLE AS dppt
      WHERE (T1.PARKINGSPACEID = PARKINGSPACEID)
      GROUP BY PARKINGSECTORID) AS t1) AS SECTORS,

  (SELECT COUNT(*) AS Expr1
   FROM dbo.DAXPARKINGPOSITIONTABLE AS dppt
   WHERE (T1.PARKINGSPACEID = PARKINGSPACEID)
     AND (PARKINGSPACETRANSTYPE = 0)) AS AVAILPOSITION,

  (SELECT COUNT(*) AS Expr1
   FROM dbo.DAXPARKINGPOSITIONTABLE AS dppt
   WHERE (T1.PARKINGSPACEID = PARKINGSPACEID)
     AND (PARKINGSPACETRANSTYPE = 2)) AS RESERVEDPOSITION,

  (SELECT COUNT(*) AS Expr1
   FROM dbo.DAXPARKINGPOSITIONTABLE AS dppt
   WHERE (T1.PARKINGSPACEID = PARKINGSPACEID)
     AND (PARKINGSPACETRANSTYPE <> 0)) AS TAKENPOSITION,

  (SELECT COUNT(*) AS Expr1
   FROM dbo.DAXPARKINGPOSITIONTABLE AS dppt
   WHERE (T1.PARKINGSPACEID = PARKINGSPACEID)
     AND (PARKINGINACTIVE = 1)) AS INACTIVEPOSITION,

  (SELECT COUNT(*) AS Expr1
   FROM dbo.DAXPARKINGPOSITIONTABLE AS dppt
   WHERE (T1.PARKINGSPACEID = PARKINGSPACEID)
     ) AS TOTALPOSITION,

  (SELECT COUNT(*) AS Expr1
   FROM dbo.DAXPARKINGPOSITIONTABLE AS dppt
   WHERE (T1.PARKINGSPACEID = PARKINGSPACEID)
     AND (SHIPPINGCPYTYPE = 0)) AS COMMERCIALCONTAINERS,

  (SELECT COUNT(*) AS Expr1
   FROM dbo.DAXPARKINGPOSITIONTABLE AS dppt
   WHERE (T1.PARKINGSPACEID = PARKINGSPACEID)
     AND (SHIPPINGCPYTYPE = 1)) AS OWNCONTAINERS,

  (SELECT COUNT(*) AS Expr1
   FROM
     (SELECT SHIPCPYCONTAINERID
      FROM dbo.DAXPARKINGPOSITIONTABLE AS dppt
      WHERE (T1.PARKINGSPACEID = PARKINGSPACEID) AND (SHIPCPYCONTAINERID IS NOT NULL)
      GROUP BY SHIPCPYCONTAINERID) AS t1) AS TOTALCONTAINERS

FROM dbo.DAXPARKINGPOSITIONTABLE AS T1
GROUP BY PARKINGSPACEID,
         PARKINGSPACENAME
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXPCCANTIDADFACTOR') DROP VIEW DAXPCCANTIDADFACTOR
GO
CREATE VIEW [dbo].[DAXPCCANTIDADFACTOR] AS 
SELECT DISTINCT ISNULL(FRU.SYMBOL, '') AS FROM_UNIT,
                ISNULL(TOU.SYMBOL, '') AS TO_UNIT,
                ISNULL(UOM.FACTOR, 0) AS FACTOR,
                IT.ITEMID AS 'ITEMID',
                ISNULL(UOM.DENOMINATOR, 0) AS DENOMINATOR,
                P.DATAAREAID AS 'DATAAREAID',
                INV.UNITID AS 'INV_UNITID'
FROM UNITOFMEASURECONVERSION UOM
INNER JOIN UNITOFMEASURE FRU ON FRU.PARTITION = UOM.PARTITION
AND FRU.RECID = UOM.FROMUNITOFMEASURE
INNER JOIN UNITOFMEASURE TOU ON TOU.PARTITION = UOM.PARTITION
AND TOU.RECID = UOM.TOUNITOFMEASURE
INNER JOIN PdsCatchWeightItem P ON P.PDSCWUNITID = FRU.SYMBOL
INNER JOIN INVENTTABLE IT ON P.ITEMID = IT.ITEMID
INNER JOIN INVENTTABLEMODULE INV ON INV.PARTITION = IT.PARTITION
AND INV.DATAAREAID = IT.DATAAREAID
AND INV.ITEMID = IT.ITEMID
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXPURCHLINE') DROP VIEW DAXPURCHLINE
GO
CREATE VIEW [dbo].[DAXPURCHLINE]
AS
SELECT PL.PURCHID,
       PL.DEL_LINENUM,
       PL.ITEMID,
       PL.PURCHSTATUS,
       PL.SHIPPINGDATEREQUESTED,
       PL.DEL_LEDGERACCOUNT,
       PL.DELIVERYDATE,
       PL.NAME AS NAME_DEFAULT,
       ERPT.NAME,
       PL.TAXGROUP,
       PL.QTYORDERED,
       PL.PURCHRECEIVEDNOW,
       PL.REMAINPURCHPHYSICAL,
       PL.REMAINPURCHFINANCIAL,
       PL.PRICEUNIT,
       PL.PURCHPRICE,
       PL.CURRENCYCODE,
       PL.LINEPERCENT,
       PL.LINEDISC,
       PL.LINEAMOUNT,
       PL.EXTERNALITEMID,
       PL.PURCHUNIT,
       PL.DEL_DIMENSION,
       PL.DEL_DIMENSION2_,
       PL.DEL_DIMENSION3_,
       PL.DEL_DIMENSION4_,
       PL.DEL_DIMENSION5_,
       PL.CONFIRMEDDLV,
       PL.ADDRESSREFRECID,
       PL.INVENTTRANSID,
       PL.VENDGROUP,
       PL.VENDACCOUNT,
       PL.ADDRESSREFTABLEID,
       PL.PURCHQTY,
       PL.PURCHMARKUP,
       PL.INVENTRECEIVEDNOW,
       PL.MULTILNDISC,
       PL.MULTILNPERCENT,
       PL.PURCHASETYPE,
       PL.COVREF,
       PL.REMAININVENTPHYSICAL,
       PL.TAXITEMGROUP,
       PL.TRANSACTIONCODE,
       PL.SHIPPINGDATECONFIRMED,
       PL.COUNTYORIGDEST,
       PL.TAXAUTOGENERATED,
       PL.UNDERDELIVERYPCT,
       PL.OVERDELIVERYPCT,
       PL.DEL_TAX1099BOX,
       PL.TAX1099AMOUNT,
       PL.BARCODE,
       PL.BARCODETYPE,
       PL.INVENTREFID,
       PL.INVENTREFTRANSID,
       PL.ITEMREFTYPE,
       PL.PROJTRANSID,
       PL.BLOCKED,
       PL.COMPLETE,
       PL.REQPLANIDSCHED,
       PL.REQPOID,
       PL.ITEMROUTEID,
       PL.ITEMBOMID,
       PL.LINEHEADER,
       PL.SCRAP,
       PL.RETURNACTIONID,
       PL.INTERCOMPANYORIGIN,
       PL.PROJCATEGORYID,
       PL.PROJID,
       PL.INVENTDIMID,
       PL.TRANSPORT,
       PL.STATPROCID,
       PL.PORT,
       PL.ASSETID,
       PL.ASSETTRANSTYPEPURCH,
       PL.ASSETBOOKID,
       PL.PROJLINEPROPERTYID,
       PL.PROJTAXITEMGROUPID,
       PL.PROJTAXGROUPID,
       PL.PROJSALESPRICE,
       PL.PROJSALESCURRENCYID,
       PL.INTERCOMPANYINVENTTRANSID,
       PL.PROJSALESUNITID,
       PL.DEL_DELIVERYADDRESS,
       PL.DELIVERYNAME,
       PL.DEL_DELIVERYSTREET,
       PL.DEL_DELIVERYZIPCODE,
       PL.DEL_DELIVERYCITY,
       PL.DEL_DELIVERYCOUNTY,
       PL.DEL_DELIVERYSTATE,
       PL.DEL_DELIVERYCOUNTRYREGIONID,
       PL.DELIVERYTYPE,
       PL.CUSTOMERREF,
       PL.CUSTPURCHASEORDERFORMNUM,
       PL.DEL_BLANKETREFTRANSID,
       PL.STATTRIANGULARDEAL,
       PL.TAX1099STATE,
       PL.TAX1099STATEAMOUNT,
       PL.ITEMTAGGING,
       PL.CASETAGGING,
       PL.PALLETTAGGING,
       PL.DEL_INTERCOMPANYRETURNACTIONID,
       PL.DEL_INTERCOMPANYRETURNACTIONTXT,
       PL.REMAININVENTFINANCIAL,
       PL.PURCHREQLINEREFID,
       PL.DEPRECIATIONSTARTDATE,
       PL.ACTIVITYNUMBER,
       PL.RETURNSTATUS,
       PL.RETURNDISPOSITIONCODEID,
       PL.CREATEFIXEDASSET,
       PL.ASSETGROUP,
       PL.DEL_REQUISITIONER,
       PL.REQATTENTION,
       PL.PURCHREQID,
       PL.TAX1099RECID,
       PL.MATCHINGPOLICY,
       PL.PROCUREMENTCATEGORY,
       PL.LINEDELIVERYTYPE,
       PL.SOURCEDOCUMENTLINE,
       PL.DEFAULTDIMENSION,
       PL.LEDGERDIMENSION,
       PL.ISDELETED,
       PL.ISMODIFIED,
       PL.MATCHINGAGREEMENTLINE,
       PL.MANUALENTRYCHANGEPOLICY,
       PL.SYSTEMENTRYCHANGEPOLICY,
       PL.SYSTEMENTRYSOURCE,
       PL.WORKFLOWSTATE,
       PL.EDITABLEINWORKFLOW,
       PL.WFINVRECEIVEDSTATE,
       PL.WFDELIVERYDUESTATE,
       PL.TAX1099FIELDS,
       PL.GSTHSTTAXTYPE_CA,
       PL.DELIVERYPOSTALADDRESS,
       PL.LINENUMBER,
       PL.TAXWITHHOLDITEMGROUPHEADING_TH,
       PL.REQUESTER,
       PL.ACCOUNTINGDISTRIBUTIONTEMPLATE,
       PL.OPERATIONTYPE_MX,
       PL.STOCKEDPRODUCT,
       PL.ISFINALIZED,
       PL.PLANREFERENCE,
       PL.ISINVOICEMATCHED,
       PL.DEL_TAXATIONORIGIN_BR,
       PL.ITEMPBAID,
       PL.DEL_VENDCFOPID_BR,
       PL.DEL_VENDRECEIPTISSUECODE_BR,
       PL.DEL_TAXFISCALCLASSIFICATIONID_BR,
       PL.DEL_WITHOUTINVENTORY_BR,
       PL.DEL_SALESPURCH_BR,
       PL.DEL_DELIVERYDISTRICTNAME,
       PL.TAXWITHHOLDBASECUR_TH,
       PL.DEL_TAXWITHHOLDITEMGROUP_TH,
       PL.TAXWITHHOLDGROUP_TH,
       PL.TAXSERVICECODE_BR,
       PL.DEL_TAXWITHHOLDFBTCATEGORYID_IN,
       PL.DEL_TAXWITHHOLDFBTTRANSTYPE_IN,
       PL.DEL_POSTINGPROFILE_RU,
       PL.DEL_ISRECOVERABLESERVICETAX_IN,
       PL.DEL_DELIVERYADDRESSNUMBER,
       PL.DEL_DELIVERYADDRESSCOMPLEMENT,
       PL.DEL_COMPANYLOCATION_IN,
       PL.DEL_SERVICECODETABLE_IN,
       PL.DEL_CUSTOMSTARIFFCODETABLE_IN,
       PL.DEL_EXCISETARIFFCODES_IN,
       PL.DEL_SALESTAXFORMTYPES_IN,
       PL.DEL_VENDORLOCATION_IN,
       PL.DEL_ASSESSABLEVALUE_IN,
       PL.DEL_EXCISETARIFFCODE_IN,
       PL.DEL_CUSTOMSTARIFFCODE_IN,
       PL.DEL_SALESTAXFORMTYPE_IN,
       PL.DEL_NONRECOVERABLEPERCENT_IN,
       PL.DEL_MAXIMUMRETAILPRICE_IN,
       PL.DEL_NAME_IN,
       PL.DEL_ADDRESS_IN,
       PL.DEL_ECCNUMBER_IN,
       PL.DEL_SALESTAXREGISTRATIONNUMBER_IN,
       PL.DEL_TIN_IN,
       PL.DEL_STCNUMBER_IN,
       PL.DEL_IECNUMBER_IN,
       PL.DEL_EXCISERECORDTYPE_IN,
       PL.DEL_GTASERVICECATEGORY_IN,
       PL.DEL_SERVICECODE_IN,
       PL.DEL_VATGOODSTYPE_IN,
       PL.DEL_DIRECTSETTLEMENT_IN,
       PL.DEL_CONSIGNMENT_IN,
       PL.DEL_CENVATCREDITAVAILED_IN,
       PL.DEL_EXCISETYPE_IN,
       PL.DEL_STATE_IN,
       PL.DEL_TAXASPERORIGINALINVOICE_IN,
       PL.DEL_CUSTOMSMAXRETAILPRICE_IN,
       PL.DEL_CUSTOMSAPPLYEXCISE_IN,
       PL.DEL_TDSGROUP_IN,
       PL.DEL_TCSGROUP_IN,
       PL.DEL_TAN_IN,
       PL.DEL_VENDORNAME_IN,
       PL.DEL_VENDORADDRESS_IN,
       PL.DEL_VENDORSTATE_IN,
       PL.DEL_CREDITNOTEDATE_IN,
       PL.DEL_TAXWITHHOLDLINENUM_IN,
       PL.DEL_TAXWITHHOLDVOUCHER_IN,
       PL.DEL_DELIVERYVENDCATEGORY,
       PL.DEL_DELIVERYVENDCNPJCPFNUM,
       PL.DEL_DELIVERYVENDIENUM,
       PL.DEL_SOFTWAREDECLRECEIVED_IN,
       PL.INTRASTATFULFILLMENTDATE_HU,
       PL.CFOPTABLE_BR,
       PL.DEL_NATURECODE_IN,
       PL.DEL_ACKNOWLEDGEMENTNUMBER_IN,
       PL.DEL_COUNTRYREGIONCODE_IN,
       PL.DEL_TRANSACTIONTYPE_IN,
       PL.DEL_DEVIATIONQTY_RU,
       PL.DEL_REFRETURNINVOICETRANS_W,
       PL.STATISTICVALUE_LT,
       PL.DEL_INTRASTATSPECMOVE_CZ,
       PL.DEL_SADINVOICELINENO_PL,
       PL.DEL_DESTCOUNTRYREGIONID_PL,
       PL.DEL_ORIGCOUNTRYREGIONID_PL,
       PL.DEL_DELIVERYFLAT_RU,
       PL.DEL_DELIVERYBUILDING_RU,
       PL.DEL_DELIVERYESTATE_RU,
       PL.DEL_DELIVERYSTREETID_RU,
       PL.DEL_DELIVERYSETTLEMENTID_RU,
       PL.DEL_DELIVERYTOWNID_RU,
       PL.DEL_EXCEPTIONCODE_BR,
       PL.DEL_FUELCODE_BR,
       PL.PSARETAINSCHEDULEID,
       PL.DEL_PSARETAINPERCENT,
       PL.PSATOTALRETAINAMOUNT,
       PL.SERVICEDATE,
       PL.REMAINDER,
       PL.SERVICEADDRESS,
       PL.INVENTINVOICENOW,
       PL.RETAILLINENUMEX1,
       PL.VARIANTID,
       PL.RETAILPACKAGEID,
       PL.RBOPACKAGELINENUM,
       PL.DEL_HHTHANDHELDUSERID,
       PL.DEL_HHTTRANSDATE,
       PL.DEL_HHTTRANSTIME,
       PL.RETAILTEMPVALUEEX2,
       PL.MCRDROPSHIPMENT,
       PL.MCRDROPSHIPCOMMENT,
       PL.MCRDROPSHIPSTATUS,
       PL.CONFIRMEDTAXAMOUNT,
       PL.CONFIRMEDTAXWRITECODE,
       PL.DISCAMOUNT,
       PL.DISCPERCENT,
       PL.ISPWP,
       PL.PDSCALCULATIONID,
       PL.PDSCWINVENTRECEIVEDNOW,
       PL.PDSCWQTY,
       PL.PDSCWREMAININVENTFINANCIAL,
       PL.PDSCWREMAININVENTPHYSICAL,
       PL.PURCHCOMMITMENTLINE_PSN,
       PL.DEL_COUNTRYREGIONNAME_RU,
       PL.DEL_DSA_IN,
       PL.DEL_INVOICEGTDID_RU,
       PL.DEL_MARKUPCODE_RU,
       PL.DEL_PDSCOUNTRYOFORIGIN1,
       PL.DEL_PDSCOUNTRYOFORIGIN2,
       PL.DEL_PDSCWPURCHUNIT,
       PL.DEL_PDSINVENTRECEIVEDNOWCATCHWGT,
       PL.DEL_PDSPURCHQTYCATCHWGT,
       PL.DEL_PDSPURCHRECEIVEDNOWCATCHWGT,
       PL.DEL_PDSPURCHUNITCATCHWGT,
       PL.DEL_PDSQTYORDEREDCATCHWGT,
       PL.DEL_PDSREMAININVENTPHYSICALCATCHWGT,
       PL.DEL_PDSREMAINPURCHFINANCIALCATCHWGT,
       PL.DEL_PDSREMAINPURCHPHYSICALCATCHWGT,
       PL.DEL_PDSUSEVENDBATCHDATE,
       PL.DEL_PDSUSEVENDBATCHEXP,
       PL.DEL_PDSVENDBATCHDATE,
       PL.DEL_PDSVENDBATCHID,
       PL.DEL_PDSVENDEXPIRYDATE,
       PL.DEL_PRICEAGREEMENTDATE_RU,
       PL.AGREEMENTSKIPAUTOLINK,
       PL.MANUALMODIFIEDFIELD,
       PL.MCRORDERLINE2PRICEHISTORYREF,
       PL.PROJWORKER,
       PL.SKIPDISTRIBUTIONUPDATE,
       PL.TAMITEMVENDREBATEGROUPID,
       PL.PURCHIDORIGINAL,
       PL.DELIVERYDATEGTI,
       PL.PACKINGSLIPIDGTI,
       PL.DEPARTMENT,
       PL.BUDGETRESERVATIONLINE_PSN,
       PL.CREDITEDVENDINVOICETRANS,
       PL.MODIFIEDDATETIME,
       PL.CREATEDDATETIME,
       PL.DATAAREAID,
       PL.RECVERSION,
       PL.PARTITION,
       PL.RECID
FROM dbo.PURCHLINE AS PL
INNER JOIN dbo.INVENTTABLE AS ITL ON PL.ITEMID = ITL.ITEMID
AND PL.DATAAREAID = ITL.DATAAREAID
INNER JOIN dbo.ECORESPRODUCTTRANSLATION AS ERPT ON ITL.PRODUCT = ERPT.PRODUCT
AND ITL.PARTITION = ERPT.PARTITION
WHERE (ERPT.LANGUAGEID = N'es-mx');
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXSALESORDERVIEW') DROP VIEW DAXSALESORDERVIEW
GO
CREATE VIEW [dbo].[DAXSALESORDERVIEW] AS
SELECT ST.SALESNAME AS SALESNAME_OLD,
       DPT.NAME AS SALESNAME,
       SL.SALESID,
       SL.LINENUM,
       SL.ITEMID,
       SL.DATAAREAID,
       SL.SALESQTY,
       SL.SALESPRICE,
       SL.QTYORDERED,
       SL.PDSCWQTY AS PDSCWQTYSALE,
       SL.SALESUNIT,
       IT.QTY,
       IT.PDSCWQTY AS PDSCWQTYRES,
       AL.INVENTLOCATIONID,
       AL.INVENTBATCHID,
       AL.WMSLOCATIONID,
       SL.NAME AS NAME_DEFAULT,
       SL.LINEAMOUNT,
       ERPT.NAME
FROM dbo.SALESLINE AS SL
INNER JOIN dbo.INVENTTRANSORIGIN AS ITO ON ITO.PARTITION = SL.PARTITION
AND ITO.DATAAREAID = SL.DATAAREAID
AND ITO.INVENTTRANSID = SL.INVENTTRANSID
INNER JOIN dbo.INVENTTRANS AS IT ON IT.PARTITION = ITO.PARTITION
AND IT.DATAAREAID = ITO.DATAAREAID
AND IT.INVENTTRANSORIGIN = ITO.RECID
INNER JOIN dbo.INVENTDIM AS AL ON IT.INVENTDIMID = AL.INVENTDIMID
AND IT.PARTITION = AL.PARTITION
INNER JOIN dbo.INVENTTABLE AS ITL ON SL.ITEMID = ITL.ITEMID
AND SL.DATAAREAID = ITL.DATAAREAID
INNER JOIN dbo.ECORESPRODUCTTRANSLATION AS ERPT ON ITL.PRODUCT = ERPT.PRODUCT
AND ITL.PARTITION = ERPT.PARTITION
INNER JOIN dbo.SALESTABLE AS ST ON SL.SALESID = ST.SALESID
INNER JOIN dbo.CUSTTABLE AS CT ON ST.CUSTACCOUNT = CT.ACCOUNTNUM
AND ST.DATAAREAID = CT.DATAAREAID
INNER JOIN dbo.DIRPARTYTABLE AS DPT ON CT.PARTY = DPT.RECID
WHERE (SL.PARTITION = 5637144576)
  AND (IT.STATUSISSUE = 4)
  AND ERPT.LANGUAGEID = N'es-mx'
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXSHIPCPYCONTAINERLOCALPORT') DROP VIEW DAXSHIPCPYCONTAINERLOCALPORT
GO
CREATE VIEW [dbo].[DAXSHIPCPYCONTAINERLOCALPORT] AS
SELECT T1.SHIPCPYCONTAINERLOCALPORTID, T1.NAME 
FROM SHIPCPYCONTAINERLOCALPORT T1
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXSHIPCPYCONTAINERUNIT') DROP VIEW DAXSHIPCPYCONTAINERUNIT
GO
CREATE VIEW [dbo].[DAXSHIPCPYCONTAINERUNIT] AS
SELECT T1.SHIPCPYCONTAINERUNITID, T1.DESCRIPTION
FROM SHIPCPYCONTAINERUNIT T1
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXSHIPPINGCPYVENDTABLEPILOTDOCUMENT') DROP VIEW DAXSHIPPINGCPYVENDTABLEPILOTDOCUMENT
GO
CREATE VIEW [dbo].[DAXSHIPPINGCPYVENDTABLEPILOTDOCUMENT] AS 
SELECT DISTINCT
	T1.SHIPPINGCPYVENDTABLEPILOTID,
	T2.DOCUMENTTYPEIDENTIFICATIONID,
	T2.SHIPCPYPILOTDOCUMENTNUM, 
	T3.INTRASTATTRANSPORT
FROM SHIPPINGCPYVENDTABLEPILOT T1
INNER JOIN SHIPPINGCPYVENDTABLEPILOTDOCUMENT T2 ON T1.RECID = T2.SHIPPINGCPYVENDTABLEPILOTRECID
INNER JOIN SHIPPINGCPYVENDTABLE T3 ON T1.SHIPPINGCPYVENDTABLERECID = T3.RECID
WHERE T2.SHIPCPYINACTIVE = 0
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXTRASLADOEXTERNOPARKINGPOSITIONID') DROP VIEW DAXTRASLADOEXTERNOPARKINGPOSITIONID
GO
CREATE VIEW [dbo].[DAXTRASLADOEXTERNOPARKINGPOSITIONID] AS
SELECT DAXCONTENEDORES.SHIPCPYCONTAINERID AS 'SHIPCPYCONTAINERID',
       PARKINGSPACETABLE.PARKINGSPACEID AS 'PARKINGSPACEID',
       PARKINGSECTORTABLE.PARKINGSECTORID AS 'PARKINGSECTORID',
       ParkingPositionTable.PARKINGPOSITIONID AS 'PARKINGPOSITIONID',
       PARKINGSECTORTABLE.NAME AS 'NAME',
       CONCAT(PARKINGSECTORTABLE.PARKINGSECTORID, '-', PARKINGSECTORTABLE.NAME) AS 'SECTNAME',
       ParkingPositionTable.NAME AS 'NAMEPOSITION',
	   PARKINGSPACETABLE.ISEXTERNAL AS 'SPACEISEXTERNAL',
	   PARKINGSPACETABLE.PARKINGINACTIVE AS 'SPACEINACTIVE',
	   PARKINGSECTORTABLE.PARKINGINACTIVE AS 'SECTORINACTIVE',
	   PARKINGPOSITIONTABLE.PARKINGINACTIVE AS 'POSITIONINACTIVE'
FROM PARKINGPOSITIONTABLE
LEFT JOIN DAXCONTENEDORES ON ParkingPositionTable.PARKINGPOSITIONID = DAXCONTENEDORES.PARKINGPOSITIONID
LEFT JOIN PARKINGSECTORTABLE ON PARKINGPOSITIONTABLE.PARKINGSECTORTABLERECID = PARKINGSECTORTABLE.RECID
LEFT JOIN PARKINGSPACETABLE ON PARKINGSECTORTABLE.PARKINGSPACETABLERECID = PARKINGSPACETABLE.RECID
WHERE PARKINGSPACETABLE.PARKINGINACTIVE = 0
AND PARKINGSECTORTABLE.PARKINGINACTIVE = 0
AND PARKINGPOSITIONTABLE.PARKINGINACTIVE = 0
AND DAXCONTENEDORES.SHIPCPYCONTAINERID IS NULL
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXTRASLADOINTERNOPARKINGPOSITIONID') DROP VIEW DAXTRASLADOINTERNOPARKINGPOSITIONID
GO
CREATE view [dbo].[DAXTRASLADOINTERNOPARKINGPOSITIONID] AS 
SELECT DAXCONTENEDORES.SHIPCPYCONTAINERID AS 'SHIPCPYCONTAINERID',
       PARKINGSPACETABLE.PARKINGSPACEID AS 'PARKINGSPACEID',
       PARKINGSECTORTABLE.PARKINGSECTORID AS 'PARKINGSECTORID',
       ParkingPositionTable.PARKINGPOSITIONID AS 'PARKINGPOSITIONID',
       PARKINGSECTORTABLE.NAME AS 'NAME',
       CONCAT(PARKINGSECTORTABLE.PARKINGSECTORID, '-', PARKINGSECTORTABLE.NAME) AS 'SECTNAME',
       ParkingPositionTable.NAME AS 'NAMEPOSITION',
	   PARKINGSPACETABLE.ISEXTERNAL AS 'SPACEISEXTERNAL',
	   PARKINGSPACETABLE.PARKINGINACTIVE AS 'SPACEINACTIVE',
	   PARKINGSECTORTABLE.PARKINGINACTIVE AS 'SECTORINACTIVE',
	   PARKINGPOSITIONTABLE.PARKINGINACTIVE AS 'POSITIONINACTIVE'
FROM PARKINGPOSITIONTABLE
LEFT JOIN DAXCONTENEDORES ON ParkingPositionTable.PARKINGPOSITIONID = DAXCONTENEDORES.PARKINGPOSITIONID
LEFT JOIN PARKINGSECTORTABLE ON PARKINGPOSITIONTABLE.PARKINGSECTORTABLERECID = PARKINGSECTORTABLE.RECID
LEFT JOIN PARKINGSPACETABLE ON PARKINGSECTORTABLE.PARKINGSPACETABLERECID = PARKINGSPACETABLE.RECID
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXVENDPACKINGSLIPID') DROP VIEW DAXVENDPACKINGSLIPID
GO
CREATE VIEW [dbo].[DAXVENDPACKINGSLIPID]
AS
SELECT ORDERACCOUNT,PACKINGSLIPID,DATAAREAID 
FROM VENDPACKINGSLIPJOUR
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXWAREHOUSEUSER') DROP VIEW DAXWAREHOUSEUSER
GO
CREATE VIEW [dbo].[DAXWAREHOUSEUSER] AS 
SELECT T1. USERID,
       T1.INVENTLOCATIONID,
       T1.DATAAREAID,
       T2.SHIPCPYCONTAINERCLOSED
FROM WHSWORKUSERWAREHOUSE T1
INNER JOIN INVENTLOCATION T2 ON T1.INVENTLOCATIONID = T2.INVENTLOCATIONID
WHERE T2.SHIPCPYCONTAINERCLOSED = 0
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'DAXWMSLOCATIONBYCONTAINER') DROP VIEW DAXWMSLOCATIONBYCONTAINER
GO
CREATE VIEW [dbo].[DAXWMSLOCATIONBYCONTAINER] AS
SELECT T1.PARKINGSPACEID,
       T1.PARKINGSECTORID,
       T1.PARKINGPOSITIONID,
       T1.SHIPCPYCONTAINERID,
       T4.WMSLOCATIONID
FROM dbo.DAXPARKINGPOSITIONTABLE AS T1
INNER JOIN dbo.SHIPCPYCONTAINERTABLE AS T2 ON T1.SHIPCPYCONTAINERRECID = T2.RECID
INNER JOIN dbo.INVENTLOCATION AS T3 ON T2.SHIPCPYCONTAINERID = T3.INVENTLOCATIONID
INNER JOIN dbo.WMSLOCATION AS T4 ON T3.INVENTLOCATIONID = T4.INVENTLOCATIONID
WHERE T1.SHIPCPYCONTAINERRECID IS NOT NULL
  AND T2.LOCPROFILEID = T4.LOCPROFILEID
GROUP BY T1.PARKINGSPACEID,
         T1.PARKINGSPACENAME,
         T1.PARKINGSECTORID,
         T1.PARKINGSECTORNAME,
         T1.PARKINGPOSITIONID,
         T1.PARKINGPOSITIONNAME,
         T1.SHIPCPYCONTAINERID,
         T1.SHIPCPYCONTAINERRECID,
         T3.NAME,
         T4.WMSLOCATIONID
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'FISCALYEAR') DROP VIEW FISCALYEAR
GO
CREATE VIEW [dbo].[FISCALYEAR] AS
SELECT DISTINCT T1.RECID,
                T1.NAME,
                T1.STARTDATE,
                T1.ENDDATE,
                T1.STARTD,
                T1.ENDD,
                T2.STATUS,
                T3.NAME AS DATAAREAID
FROM dbo.FISCALCALENDARPERIOD AS T1
INNER JOIN dbo.LEDGERFISCALCALENDARPERIOD AS T2 ON T1.RECID = T2.FISCALCALENDARPERIOD
INNER JOIN dbo.LEDGER AS T3 ON T2.LEDGER = T3.RECID
WHERE (T1.NAME <> 'Período 0')
GO
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS  WHERE TABLE_NAME = 'OCFILTROPORLINEA') DROP VIEW OCFILTROPORLINEA
GO
CREATE VIEW OCFILTROPORLINEA
AS SELECT 
T1. DATAAREAID,
T1.PURCHSTATUS,
T1.PURCHID,
T1.DOCUMENTSTATE,
T1.PURCHNAME,
T3.INVENTLOCATIONID
FROM PURCHTABLE T1
INNER JOIN PURCHLINE T2 ON T1.PURCHID = T2.PURCHID
INNER JOIN INVENTDIM T3 ON T2.INVENTDIMID = T3.INVENTDIMID
WHERE T1.PURCHSTATUS = 1 and T3.INVENTLOCATIONID <> '' AND T1.DOCUMENTSTATE = 40 AND T1.PURCHSTATUS = 1GO