IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'DAXPILOTS') DROP PROCEDURE DAXPILOTS
GO
CREATE PROCEDURE [dbo].[DAXPILOTS] 
    @SHIPCPYCONTAINERID NVARCHAR(30),
    @parkingSpaceTransTypeActual INT,
	@external_movement INT = 0
AS
BEGIN
    DECLARE @ResultTable TABLE (
        SHIPPINGCPYVENDTABLEPILOTID NVARCHAR(40),
		NAME NVARCHAR(60),
        INTRASTATTRANSPORT NVARCHAR(10)
    );

    DECLARE @SHIPPINGCPYVENDTABLERECID BIGINT;
	DECLARE @RECID BIGINT;
    DECLARE @PARKINGSPACETRANSTYPE INT;
    DECLARE @SHIPPINGCPYTYPE INT;

    -- Obtener los valores necesarios de SHIPCPYCONTAINERTABLE
    SELECT @SHIPPINGCPYVENDTABLERECID = SHIPPINGCPYVENDTABLERECID,
           @SHIPCPYCONTAINERID = SHIPCPYCONTAINERID,
		   @RECID = RECID
    FROM SHIPCPYCONTAINERTABLE
    WHERE SHIPCPYCONTAINERID = @SHIPCPYCONTAINERID
	AND SHIPCPYCONTAINERSTATE NOT IN (5);

    -- Determinar el RECID de SHIPPINGCPYVENDTABLE basado en shipCpyContainerState
    IF @parkingSpaceTransTypeActual IN (2, 9) -- Si la posicion es, [Reservado -> Ingresado] [Traslado preparado entrada externa -> Ingresado]
    BEGIN
        SELECT TOP 1 @PARKINGSPACETRANSTYPE = T1.PARKINGSPACETRANSTYPE
        FROM SHIPCPYCONTAINERTRANS T1
        WHERE T1.SHIPCPYCONTAINERTABLERECID = @RECID
        ORDER BY T1.CREATEDDATETIME DESC, T1.RECID DESC;

        IF @PARKINGSPACETRANSTYPE = 13 -- Si es, Traslado de salida externo
        BEGIN
            SELECT @SHIPPINGCPYTYPE = SHIPPINGCPYTYPE
            FROM SHIPPINGCPYVENDTABLE
            WHERE RECID = @SHIPPINGCPYVENDTABLERECID;

            IF @SHIPPINGCPYTYPE = 0 -- Si la naviera es comercial
            BEGIN
                SELECT TOP 1 @SHIPPINGCPYVENDTABLERECID = RECID
                FROM SHIPPINGCPYVENDTABLE
                WHERE SHIPPINGCPYTYPE = 1;
            END
        END
    END
    ELSE IF @parkingSpaceTransTypeActual IN (4, 7, 10) -- Si la posicion es, [abierto -> Cerrado] [abierto -> Traslado Preparado externo] [Cerrado -> Salida Final] [Traslado preparado salida externa -> Salida Externa]
    BEGIN
        SELECT @SHIPPINGCPYTYPE = SHIPPINGCPYTYPE
        FROM SHIPPINGCPYVENDTABLE
        WHERE RECID = @SHIPPINGCPYVENDTABLERECID;

        IF ((@parkingSpaceTransTypeActual = 10) OR (@parkingSpaceTransTypeActual = 4 AND @external_movement = 1)) AND @SHIPPINGCPYTYPE = 0 -- Si es Salida Externa รณ es traslado preparado externo y la naviera es comercial
        BEGIN
            SELECT TOP 1 @SHIPPINGCPYVENDTABLERECID = RECID
            FROM SHIPPINGCPYVENDTABLE
            WHERE SHIPPINGCPYTYPE = 1;
        END
    END

    -- Obtener resultados finales
    INSERT INTO @ResultTable (SHIPPINGCPYVENDTABLEPILOTID, NAME, INTRASTATTRANSPORT)
    SELECT T1.SHIPPINGCPYVENDTABLEPILOTID, T1.NAME, T2.INTRASTATTRANSPORT
    FROM SHIPPINGCPYVENDTABLEPILOT T1
    INNER JOIN SHIPPINGCPYVENDTABLE T2 ON T1.SHIPPINGCPYVENDTABLERECID = T2.RECID
    WHERE T1.SHIPCPYINACTIVE = 0
    AND T2.RECID = @SHIPPINGCPYVENDTABLERECID
	ORDER BY T1.SHIPPINGCPYVENDTABLEPILOTID;

    -- Devolver los resultados
    SELECT * FROM @ResultTable;
END
GO
IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'DAXPILOTSVEHICLESCONFIG') DROP PROCEDURE DAXPILOTSVEHICLESCONFIG
GO
CREATE PROCEDURE [dbo].[DAXPILOTSVEHICLESCONFIG] 
    @SHIPCPYCONTAINERID NVARCHAR(30),
    @parkingSpaceTransTypeActual INT,
	@external_movement INT = 0
AS
BEGIN
    DECLARE @SHIPPINGCPYVENDTABLERECID BIGINT;
	DECLARE @RECID BIGINT;
	DECLARE @PILOTRECID_ENTRYEXT BIGINT;
	DECLARE @PILOTRECID_ENTRY BIGINT;
	DECLARE @PILOTRECID_EXIT BIGINT;
	DECLARE @PILOTRECID_EXITEXT BIGINT;
	DECLARE @PILOTRECID BIGINT;
	DECLARE @PILOTRECID2 BIGINT;
	DECLARE @LOCALPORTRECID BIGINT;
    DECLARE @PARKINGSPACETRANSTYPE INT;
    DECLARE @SHIPPINGCPYTYPE INT;
	DECLARE @LOCALPORTID VARCHAR(10);
	DECLARE @CANAUTOMATICBATCH INT;
	DECLARE @CUSTOMMARKIDTMP VARCHAR(20);
	DECLARE @CUSTOMMARKID VARCHAR(20) = '';

    -- Obtener los valores necesarios de SHIPCPYCONTAINERTABLE
    SELECT @SHIPPINGCPYVENDTABLERECID = T1.SHIPPINGCPYVENDTABLERECID,
           @SHIPCPYCONTAINERID = T1.SHIPCPYCONTAINERID,
		   @RECID = T1.RECID,
		   @PILOTRECID_ENTRYEXT = T1.SHIPCPYCONTAINERPILOTRECID_ENTRYEXT,
		   @PILOTRECID_ENTRY = T1.SHIPCPYCONTAINERPILOTRECID_ENTRY,
		   @PILOTRECID_EXIT = T1.SHIPCPYCONTAINERPILOTRECID_EXIT,
		   @PILOTRECID_EXITEXT = T1.SHIPCPYCONTAINERPILOTRECID_EXITEXT,
		   @LOCALPORTRECID = T1.SHIPCPYCONTAINERLOCALPORTRECID
    FROM SHIPCPYCONTAINERTABLE T1
    WHERE T1.SHIPCPYCONTAINERID = @SHIPCPYCONTAINERID
	AND T1.SHIPCPYCONTAINERSTATE NOT IN (5);

	-- Obtiene el puerto local configurado
	SELECT @LOCALPORTID = T1.SHIPCPYCONTAINERLOCALPORTID
	FROM SHIPCPYCONTAINERLOCALPORT T1
	WHERE T1.RECID = @LOCALPORTRECID

	-- Verifica si se puede realizar Automatico
	SELECT @CANAUTOMATICBATCH = 
	CASE 
		WHEN T1.ISEXTERNAL = 0 THEN 1
		WHEN T1.ISEXTERNAL = 1 THEN 0
	END
	FROM PARKINGSPACETABLE T1
	INNER JOIN PARKINGSECTORTABLE T2 ON T1.RECID = T2.PARKINGSPACETABLERECID
	INNER JOIN PARKINGPOSITIONTABLE T3 ON T2.RECID = T3.PARKINGSECTORTABLERECID
	WHERE T3.SHIPCPYCONTAINERTABLERECID = @RECID;

	-- buscar la ultima transaccion de contenedor
	SELECT TOP 1 @PARKINGSPACETRANSTYPE = T1.PARKINGSPACETRANSTYPE,
	@CUSTOMMARKIDTMP = T1.SHIPCPYCUSTOMMARKID1
    FROM SHIPCPYCONTAINERTRANS T1
    WHERE T1.SHIPCPYCONTAINERTABLERECID = @RECID
    ORDER BY T1.CREATEDDATETIME DESC, T1.RECID DESC;

    -- Determinar el RECID de SHIPPINGCPYVENDTABLE basado en shipCpyContainerState
    IF @parkingSpaceTransTypeActual IN (2, 9) -- Si la posicion es, [Reservado -> Ingresado] [Traslado preparado entrada externa -> Ingresado]
    BEGIN

		SELECT @PILOTRECID = @PILOTRECID_ENTRY;

        IF @PARKINGSPACETRANSTYPE = 13 -- Si es, Traslado de salida externo
        BEGIN
			SELECT @CUSTOMMARKID = @CUSTOMMARKIDTMP;

            SELECT @SHIPPINGCPYTYPE = SHIPPINGCPYTYPE
            FROM SHIPPINGCPYVENDTABLE
            WHERE RECID = @SHIPPINGCPYVENDTABLERECID;

            IF @SHIPPINGCPYTYPE = 0 -- Si la naviera es comercial
            BEGIN
                SELECT @PILOTRECID = @PILOTRECID_ENTRYEXT;
            END
        END
    END
    ELSE IF @parkingSpaceTransTypeActual IN (4, 7, 10) -- Si la posicion es, [abierto -> Cerrado] [abierto -> Traslado Preparado externo] [Cerrado -> Salida Final] [Traslado preparado salida externa -> Salida Externa]
    BEGIN
        SELECT @PILOTRECID = @PILOTRECID_EXIT;

		SELECT @SHIPPINGCPYTYPE = SHIPPINGCPYTYPE
            FROM SHIPPINGCPYVENDTABLE
            WHERE RECID = @SHIPPINGCPYVENDTABLERECID;
        IF @parkingSpaceTransTypeActual = 10 -- Si es Salida Externa
        BEGIN
			SELECT @CUSTOMMARKID = @CUSTOMMARKIDTMP;

			IF @SHIPPINGCPYTYPE = 0 -- Si la naviera es comercial
			BEGIN
				SELECT @PILOTRECID = @PILOTRECID_EXITEXT;
			END
        END
		IF @parkingSpaceTransTypeActual = 4 AND @external_movement = 1 -- Si es Traslado preparado interno
		BEGIN
			IF @SHIPPINGCPYTYPE = 0  -- Si la naviera es comercial, no devuelve nada
			BEGIN
				SELECT @PILOTRECID = 0, @PILOTRECID2 = 0
			END
			ELSE
			BEGIN
				SELECT @PILOTRECID = @PILOTRECID_EXIT, @PILOTRECID2 = @PILOTRECID_ENTRY;
			END
		END
    END

    -- Devolver los resultados
	IF @external_movement = 1
	BEGIN
		SELECT 
			t1.SHIPCPYCONTAINERPILOTTYPE,
			T3.SHIPPINGCPYVENDTABLEPILOTID,
			T3.NAME,
			T4.DOCUMENTTYPEIDENTIFICATIONID,
			T4.SHIPCPYPILOTDOCUMENTNUM,
			T5.SHIPPINGCPYVENDTABLEVEHICLESID,
			T6.INTRASTATTRANSPORT,
			@CUSTOMMARKID SHIPCPYCUSTOMMARKID,
			ISNULL(@LOCALPORTID,'') SHIPCPYCONTAINERLOCALPORTID,
			0 CANAUTOMATICBATCH
		FROM SHIPCPYCONTAINERPILOT T1
		INNER JOIN SHIPPINGCPYVENDTABLEPILOT T3 ON T1.SHIPPINGCPYVENDTABLEPILOTRECID = T3.RECID
		INNER JOIN SHIPPINGCPYVENDTABLEPILOTDOCUMENT T4 ON T1.SHIPPINGCPYVENDTABLEPILOTDOCUMENTRECID = T4.RECID
		INNER JOIN SHIPPINGCPYVENDTABLEVEHICLES T5 ON T1.SHIPPINGCPYVENDTABLEVEHICLESRECID = T5.RECID
		INNER JOIN SHIPPINGCPYVENDTABLE T6 ON T3.SHIPPINGCPYVENDTABLERECID = T6.RECID
		WHERE T1.RECID IN (@PILOTRECID,@PILOTRECID2)
		UNION
		SELECT 0,'','','','','','','',@LOCALPORTID,@CANAUTOMATICBATCH
	END
	ELSE
	BEGIN
		SELECT 
			t1.SHIPCPYCONTAINERPILOTTYPE,
			T3.SHIPPINGCPYVENDTABLEPILOTID,
			T3.NAME,
			T4.DOCUMENTTYPEIDENTIFICATIONID,
			T4.SHIPCPYPILOTDOCUMENTNUM,
			T5.SHIPPINGCPYVENDTABLEVEHICLESID,
			T6.INTRASTATTRANSPORT,
			@CUSTOMMARKID SHIPCPYCUSTOMMARKID,
			ISNULL(@LOCALPORTID,'') SHIPCPYCONTAINERLOCALPORTID,
			0 CANAUTOMATICBATCH
		FROM SHIPCPYCONTAINERPILOT T1
		INNER JOIN SHIPPINGCPYVENDTABLEPILOT T3 ON T1.SHIPPINGCPYVENDTABLEPILOTRECID = T3.RECID
		INNER JOIN SHIPPINGCPYVENDTABLEPILOTDOCUMENT T4 ON T1.SHIPPINGCPYVENDTABLEPILOTDOCUMENTRECID = T4.RECID
		INNER JOIN SHIPPINGCPYVENDTABLEVEHICLES T5 ON T1.SHIPPINGCPYVENDTABLEVEHICLESRECID = T5.RECID
		INNER JOIN SHIPPINGCPYVENDTABLE T6 ON T3.SHIPPINGCPYVENDTABLERECID = T6.RECID
		WHERE T1.RECID IN (@PILOTRECID,@PILOTRECID2)
	END
END
GO
IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'DAXSHIPCPYCONTAINERTABLEDATES') DROP PROCEDURE DAXSHIPCPYCONTAINERTABLEDATES
GO
CREATE PROCEDURE [dbo].[DAXSHIPCPYCONTAINERTABLEDATES] 
    @SHIPCPYCONTAINERID NVARCHAR(30)
AS
BEGIN
    SELECT 
		T1.SHIPCPYEXPECTEDEXITDATE,
		T1.SHIPCPYALERTDATE,
		T1.SHIPCPYEXPECTEDDATECLOSED
	FROM SHIPCPYCONTAINERTABLE T1
	WHERE T1.SHIPCPYCONTAINERID = @SHIPCPYCONTAINERID
	AND T1.SHIPCPYCONTAINERSTATE NOT IN (5)
END
GO
IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'DAXVALIDATECLOSECONTAINER') DROP PROCEDURE DAXVALIDATECLOSECONTAINER
GO
CREATE PROCEDURE [dbo].[DAXVALIDATECLOSECONTAINER] 
    @ShipCpyContainerId NVARCHAR(30)
AS
BEGIN
	-- WHSZONE
	DECLARE @DontValidateSalesTable INT;
    DECLARE @AdvanceLoading INT;
	DECLARE @ZoneId	VARCHAR(20);
	DECLARE @ShipCpyContainerTableRecId BIGINT;
	DECLARE @ShipCpyContainterSalesState INT;
	-- SALESTABLE
	DECLARE @SalesTablesRecId BIGINT;
	DECLARE @SalesStatus INT;
	DECLARE @SalesId VARCHAR(50);

	 -- Obtener los valores necesarios de SHIPCPYCONTAINERTABLE
    SELECT @ShipCpyContainerTableRecId = T1.RECID,
			@ZoneId = T1.ZONEID
    FROM SHIPCPYCONTAINERTABLE T1
    WHERE T1.SHIPCPYCONTAINERID = @ShipCpyContainerId
	AND T1.SHIPCPYCONTAINERSTATE NOT IN (5);

    -- Obtiene los valores necesarios de WHSZONE
    SELECT @DontValidateSalesTable = T1.DONTVALIDATESALESTABLE,
            @AdvanceLoading = T1.ADVANCELOADING,
			@ShipCpyContainterSalesState = T1.SHIPCPYCONTAINTERSALESSTATE
	FROM WHSZONE T1
	WHERE T1.ZONEID = @ZoneId;


    -- Valida existencias en almacรฉn
	DECLARE @InventLocationRecId BIGINT;
	SELECT TOP 1 @InventLocationRecId = T1.RECID
	FROM INVENTLOCATION T1
	WHERE T1.INVENTLOCATIONID = @ShipCpyContainerId;

	IF @InventLocationRecId IS NULL
	BEGIN
		SELECT 'Revise proceso error crรญtico no existe almacรฉn ' + @ShipCpyContainerId AS ErrorMessage;
		RETURN;
	END
	ELSE
	BEGIN
		DECLARE @physicalInventCalculated NUMERIC(32,16);
		DECLARE @ItemId VARCHAR(20);
		SELECT @physicalInventCalculated = SUM(T1.POSTEDQTY) + SUM(T1.RECEIVED) - SUM(T1.DEDUCTED) + SUM(T1.REGISTERED) - SUM(T1.PICKED),
				@ItemId = T1.ITEMID
		FROM INVENTSUM T1
		INNER JOIN INVENTDIM T2 ON T1.INVENTDIMID = T2.INVENTDIMID
		AND T2.INVENTLOCATIONID = @ShipCpyContainerId
		WHERE T1.CLOSED = 0
		GROUP BY T1.ITEMID, T2.INVENTSITEID, T2.INVENTLOCATIONID;

		IF @physicalInventCalculated != 0.00
		BEGIN
			SELECT 'El contenedor ' + @ShipCpyContainerId + ', en el cรณdigo ' + @ItemId + ' tiene disponible ' + STR(@physicalInventCalculated,8,2) AS ErrorMessage;
			RETURN;
		END
	END

	-- Valida Carga anticipada
    IF @AdvanceLoading = 1
    BEGIN
        SELECT @SalesTablesRecId = T1.RECID
		FROM SALESTABLE T1
		WHERE T1.SHIPCPYCONTAINERTABLERECID = @ShipCpyContainerTableRecId;

		IF @SalesTablesRecId IS NULL
		BEGIN
			SELECT 'Antes de continuar debe asociar el contenedor ' + @ShipCpyContainerId + ' a una orden de venta, es tipo ' + @ZoneId AS ErrorMessage;
            RETURN;
		END
    END

    -- Valida Orden de Venta
	IF @DontValidateSalesTable = 1
	BEGIN
		
		SELECT @SalesTablesRecId = T1.RECID
		FROM SALESTABLE T1
		WHERE T1.SHIPCPYCONTAINERTABLERECID = @ShipCpyContainerTableRecId
		AND T1.SALESSTATUS != 4; -- Deferente de cancelado

		IF @SalesTablesRecId IS NULL
		BEGIN
			SELECT 'Revise proceso error no existe orden de venta relacionada para ' + @ShipCpyContainerId AS ErrorMessage;
            RETURN;
		END

		DECLARE SalesTableCursor CURSOR FOR
		SELECT T1.SALESID, T1.SALESSTATUS FROM SALESTABLE T1
		WHERE T1.SHIPCPYCONTAINERTABLERECID = @ShipCpyContainerTableRecId
		AND T1.SALESSTATUS != 4; -- Diferente de Cancelado

		OPEN SalesTableCursor;

		FETCH NEXT FROM SalesTableCursor INTO @SalesId, @SalesStatus;

		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @ShipCpyContainterSalesState = 1 -- Confirmada
			BEGIN
				IF @SalesStatus != 3 -- Facturado
				BEGIN
					DECLARE @CustConfirmJourRecId BIGINT;
                    SELECT TOP 1 @CustConfirmJourRecId = T1.RecId
                    FROM CustConfirmJour T1
                    WHERE T1.SalesId = @SalesId;

                    IF @CustConfirmJourRecId IS NULL
                    BEGIN
                        SELECT 'Revise proceso orden de venta ' + @SalesId + ' para ' + @ShipCpyContainerId + ', estado ' + CASE WHEN @SalesStatus = 0 THEN '' WHEN @SalesStatus = 1 THEN 'Orden abierta' END + ', no tiene confirmaciรณn' AS ErrorMessage;
                        CLOSE SalesTableCursor;
                        DEALLOCATE SalesTableCursor;
                        RETURN;
                    END
				END
			END
			ELSE IF @ShipCpyContainterSalesState = 2 -- Remisionada
            BEGIN
                IF @SalesStatus != 2 AND @SalesStatus != 3  -- Entregado y Facturado
                BEGIN
                    SELECT 'Revise proceso orden de venta ' + @SalesId + ' para ' + @ShipCpyContainerId + ', estado ' + CASE WHEN @SalesStatus = 0 THEN '' WHEN @SalesStatus = 1 THEN 'Orden abierta' END AS ErrorMessage;
                    CLOSE SalesTableCursor;
                    DEALLOCATE SalesTableCursor;
                    RETURN;
                END
            END
            ELSE
            BEGIN
                SELECT 'Revise configuraciรณn en ' + @ZoneId + ', debe configurar estado de orden de venta' AS ErrorMessage;
                CLOSE SalesTableCursor;
                DEALLOCATE SalesTableCursor;
                RETURN;
            END

            FETCH NEXT FROM SalesTableCursor INTO @SalesId, @SalesStatus;
		END

		CLOSE SalesTableCursor;
        DEALLOCATE SalesTableCursor;
	END

	SELECT NULL AS ErrorMessage;
	RETURN;
END
GO
IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'DAXVEHICLES') DROP PROCEDURE DAXVEHICLES
GO
CREATE PROCEDURE [dbo].[DAXVEHICLES] 
    @SHIPCPYCONTAINERID NVARCHAR(30),
    @parkingSpaceTransTypeActual INT,
	@external_movement INT = 0
AS
BEGIN
    DECLARE @ResultTable TABLE (
        SHIPPINGCPYVENDTABLEVEHICLESID NVARCHAR(40),
        INTRASTATTRANSPORT NVARCHAR(10)
    );

    DECLARE @SHIPPINGCPYVENDTABLERECID BIGINT;
	DECLARE @RECID BIGINT;
    DECLARE @PARKINGSPACETRANSTYPE INT;
    DECLARE @SHIPPINGCPYTYPE INT;

    -- Obtener los valores necesarios de SHIPCPYCONTAINERTABLE
    SELECT @SHIPPINGCPYVENDTABLERECID = SHIPPINGCPYVENDTABLERECID,
           @SHIPCPYCONTAINERID = SHIPCPYCONTAINERID,
		   @RECID = RECID
    FROM SHIPCPYCONTAINERTABLE
    WHERE SHIPCPYCONTAINERID = @SHIPCPYCONTAINERID
	AND SHIPCPYCONTAINERSTATE NOT IN (5);

    -- Determinar el RECID de SHIPPINGCPYVENDTABLE basado en shipCpyContainerState
    IF @parkingSpaceTransTypeActual IN (2, 9) -- Si la posicion es, [Reservado -> Ingresado] [Traslado preparado entrada externa -> Ingresado]
    BEGIN
        SELECT TOP 1 @PARKINGSPACETRANSTYPE = T1.PARKINGSPACETRANSTYPE
        FROM SHIPCPYCONTAINERTRANS T1
        WHERE T1.SHIPCPYCONTAINERTABLERECID = @RECID
        ORDER BY T1.CREATEDDATETIME DESC, T1.RECID DESC;

        IF @PARKINGSPACETRANSTYPE = 13 -- Si es, Traslado de salida externo
        BEGIN
            SELECT @SHIPPINGCPYTYPE = SHIPPINGCPYTYPE
            FROM SHIPPINGCPYVENDTABLE
            WHERE RECID = @SHIPPINGCPYVENDTABLERECID;

            IF @SHIPPINGCPYTYPE = 0 -- Si la naviera es comercial
            BEGIN
                SELECT TOP 1 @SHIPPINGCPYVENDTABLERECID = RECID
                FROM SHIPPINGCPYVENDTABLE
                WHERE SHIPPINGCPYTYPE = 1;
            END
        END
    END
    ELSE IF @parkingSpaceTransTypeActual IN (4, 7, 10) -- Si la posicion es, [abierto -> Cerrado] [abierto -> Traslado Preparado externo] [Cerrado -> Salida Final] [Traslado preparado salida externa -> Salida Externa]
    BEGIN
        SELECT @SHIPPINGCPYTYPE = SHIPPINGCPYTYPE
        FROM SHIPPINGCPYVENDTABLE
        WHERE RECID = @SHIPPINGCPYVENDTABLERECID;

        IF ((@parkingSpaceTransTypeActual = 10) OR (@parkingSpaceTransTypeActual = 4 AND @external_movement = 1)) AND @SHIPPINGCPYTYPE = 0 -- Si es Salida Externa รณ es traslado preparado externo y la naviera es comercial
        BEGIN
            SELECT TOP 1 @SHIPPINGCPYVENDTABLERECID = RECID
            FROM SHIPPINGCPYVENDTABLE
            WHERE SHIPPINGCPYTYPE = 1;
        END
    END

    -- Obtener resultados finales
    INSERT INTO @ResultTable (SHIPPINGCPYVENDTABLEVEHICLESID, INTRASTATTRANSPORT)
    SELECT T1.SHIPPINGCPYVENDTABLEVEHICLESID, T2.INTRASTATTRANSPORT
    FROM SHIPPINGCPYVENDTABLEVEHICLES T1
    INNER JOIN SHIPPINGCPYVENDTABLE T2 ON T1.SHIPPINGCPYVENDTABLERECID = T2.RECID
    WHERE T1.SHIPCPYINACTIVE = 0
    AND T2.RECID = @SHIPPINGCPYVENDTABLERECID;

    -- Devolver los resultados
    SELECT * FROM @ResultTable;
END;
GO